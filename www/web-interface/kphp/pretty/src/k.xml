 
<T>
    <globScope>
        #symLoc(3)
    </globScope>
    <superGlobalScope>
        #symLoc(2)
    </superGlobalScope>
    <globStaticScope>
        #symLoc(1)
    </globStaticScope>
    <errorManagement>
        0
    </errorManagement>
    <crntScope>
        #symLoc(3)
    </crntScope>
    <gc>
        <gc-enabled>
            false
        </gc-enabled>
        <collectMe>
            .List
        </collectMe>
    </gc>
    <instrumentation>
        <isTerminated>
            true
        </isTerminated>
        <trace>
            ListItem("built-init-state")
            ListItem("init-scopes")
            ListItem("init-builtin-classes")
            ListItem("make-exception")
            ListItem("class-no-extends")
            ListItem("class")
            ListItem("create-empty-class")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-static")
            ListItem("write-class-instance-members-no-default")
            ListItem("write-class-instance-members")
            ListItem("write-class-instance-members-nil")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-meth-no-modifiers")
            ListItem("init-class-member-decl-meth")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("make-static-decls")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-meth-no-modifiers")
            ListItem("init-class-member-decl-meth")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("make-static-decls")
            ListItem("init-class-nil")
            ListItem("make-stdClass")
            ListItem("class-stdClass")
            ListItem("class")
            ListItem("create-empty-class")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("init-class-nil")
            ListItem("init-superglobals")
            ListItem("array-literal")
            ListItem("assign-LHS2Loc")
            ListItem("lget-default")
            ListItem("lget-not-found-init-null")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem-update-crnt")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("rget-default")
            ListItem("rget-array-prop")
            ListItem("assign")
            ListItem("copy-value-to-loc-array-literal")
            ListItem("make-array-literal")
            ListItem("array-create-empty")
            ListItem("write-loc-exists")
            ListItem("zval-write-value")
            ListItem("zval-write-type")
            ListItem("array-init-props-nil")
            ListItem("expr")
            ListItem("array-literal")
            ListItem("assign-LHS2Loc")
            ListItem("lget-default")
            ListItem("lget-not-found-init-null")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("rget-default")
            ListItem("rget-array-prop")
            ListItem("assign")
            ListItem("copy-value-to-loc-array-literal")
            ListItem("make-array-literal")
            ListItem("array-create-empty")
            ListItem("write-loc-exists")
            ListItem("zval-write-value")
            ListItem("zval-write-type")
            ListItem("array-init-props-nil")
            ListItem("expr")
            ListItem("array-literal")
            ListItem("assign-LHS2Loc")
            ListItem("lget-default")
            ListItem("lget-not-found-init-null")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("rget-default")
            ListItem("rget-array-prop")
            ListItem("assign")
            ListItem("copy-value-to-loc-array-literal")
            ListItem("make-array-literal")
            ListItem("array-create-empty")
            ListItem("write-loc-exists")
            ListItem("zval-write-value")
            ListItem("zval-write-type")
            ListItem("array-init-props-nil")
            ListItem("expr")
            ListItem("ref-assign-fresh-array-elem")
            ListItem("array-update-elem-create")
            ListItem("array-create-elem")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("expr")
            ListItem("build-array-compare")
            ListItem("function-decl-ret-value")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("make-static-decls")
            ListItem("make-function")
            ListItem("document-3")
            ListItem("literal-string")
            ListItem("echo-cons")
            ListItem("toString-string")
            ListItem("internal-print")
            ListItem("refactor-cons-no-fun")
            ListItem("refactor-cons-no-fun")
            ListItem("refactor-nil-no-fun")
            ListItem("run")
            ListItem("detect-zebra")
            ListItem("make-static-decls")
            ListItem("seq-empty")
            ListItem("class-no-extends")
            ListItem("class")
            ListItem("create-empty-class")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("init-class-cons")
            ListItem("literal-string")
            ListItem("dq-content")
            ListItem("double-quoted")
            ListItem("constant-encapsed-string")
            ListItem("write-class-static-members")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem-update-crnt")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("write-class-static-members")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-static")
            ListItem("write-class-instance-members")
            ListItem("write-class-instance-members-nil")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-static")
            ListItem("write-class-instance-members")
            ListItem("write-class-instance-members-nil")
            ListItem("init-class-cons")
            ListItem("init-class-member-decl-static")
            ListItem("write-class-instance-members")
            ListItem("write-class-instance-members-nil")
            ListItem("init-class-nil")
            ListItem("var2Id")
            ListItem("cond-false")
            ListItem("obj-creation-className2Id")
            ListItem("obj-creation")
            ListItem("assign-LHS2Loc")
            ListItem("lget-default")
            ListItem("lget-not-found-init-null")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem-update-crnt")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("rget-default")
            ListItem("rget-array-prop")
            ListItem("assign")
            ListItem("copy-value-to-loc-object-literal")
            ListItem("make-new-obj")
            ListItem("array-create-empty")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("obj-init")
            ListItem("literal-false")
            ListItem("built-obj-prop-list-non-private-add")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem-update-crnt")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("literal-true")
            ListItem("built-obj-prop-list-private")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("literal-int")
            ListItem("built-obj-prop-list-non-private-add")
            ListItem("alloc-value")
            ListItem("copy-value-to-loc-scalar")
            ListItem("detectForeachItemChange-false-2")
            ListItem("write-loc-undef")
            ListItem("zval-create")
            ListItem("array-create-elem")
            ListItem("inc-refCount-1")
            ListItem("zval-write-refCount")
            ListItem("built-obj-prop-list-parent")
            ListItem("built-obj-prop-list-root")
            ListItem("copy-value-to-loc-obj")
            ListItem("detectForeachItemChange-false-2")
            ListItem("inc-refCount-2")
            ListItem("zval-write-refCount")
            ListItem("write-loc-exists")
            ListItem("zval-write-value")
            ListItem("zval-write-type")
            ListItem("run-constructor-none")
            ListItem("expr")
            ListItem("literal-string")
            ListItem("echo-cons")
            ListItem("toString-string")
            ListItem("internal-print")
        </trace>
    </instrumentation>
    <config>
        <varDumpLevel>
            0
        </varDumpLevel>
    </config>
    <declarations>
        <classes>
            Exception |-> class ( stdClass , ListItem(prop ( "errorMsg" , 
              none , NULL )) , "Exception" |-> method ( (f ( 'ListWrap('Param(
              'Variable('Simple("msg")))) , 'ListWrap('Expr('Assign(
              'ObjectAccess('Variable('Simple("this")),, 'ObjectProperty(
              'Simple("errorMsg"))),, 'Variable('Simple("msg"))))) , @byValue 
              , #symLoc(6) )) , none , false ) "getMessage" |-> method ( (f ( 
              'ListWrap(.KList) , 'ListWrap('Return('Some('ObjectAccess(
              'Variable('Simple("this")),, 'ObjectProperty('Simple("errorMsg")
              ))))) , @byValue , #symLoc(7) )) , none , false ) , #symLoc(5) )
            Foo |-> class ( stdClass , ListItem(prop ( "x" , none , 'False(
              .KList) )) ListItem(prop ( "y" , (pri ( Foo )) , 'True(.KList) )
              ) ListItem(prop ( "z" , pro , 'LNumber('Deci("123")) )) , .Map ,
               #symLoc(14) )
            stdClass |-> class ( ROOT , .List , .Map , #symLoc(8) )
        </classes>
        <functions>
            "array_key_exists" |-> f ( 'ListWrap('Param('Variable('Simple(
              "k"))),, 'ParamRef('Variable('Simple("x")))) , 'ListWrap('Return
              (array_key_exists ( 'Variable('Simple("k")) , 'Variable('Simple(
              "x")) ))) , @byValue , #symLoc(4) )
            "count" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(count ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "current" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(#current ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "define" |-> f ( 'ListWrap('Param('Variable('Simple("name"))),, 
              'Param('Variable('Simple("value")))) , 'ListWrap('Return(#define
               ( 'Variable('Simple("name")) , 'Variable('Simple("value")) ))) 
              , @byValue , #symLoc(4) )
            "defined" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(#defined ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "each" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(#each ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "gettype" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(#gettype ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "isEqualArray" |-> f ( 'ListWrap('Param('Variable('Simple("op1")))
              ,, 'Param('Variable('Simple("op2")))) , 'ListWrap('If('Less(
              'FunctionCall('FunctionName("count"),, 'ListWrap('Param(
              'Variable('Simple("op1"))))),, 'FunctionCall('FunctionName(
              "count"),, 'ListWrap('Param('Variable('Simple("op2")))))),, 
              'Block('ListWrap('Return('Some('Negative('LNumber('Deci("1")))))
              )),, 'ListWrap('ElseIf('Greater('FunctionCall('FunctionName(
              "count"),, 'ListWrap('Param('Variable('Simple("op1"))))),, 
              'FunctionCall('FunctionName("count"),, 'ListWrap('Param(
              'Variable('Simple("op2")))))),, 'Block('ListWrap('Return('Some(
              'LNumber('Deci("1"))))))))),, 'ForEach('Variable('Simple("op1"))
              ,, 'Pattern('Some('Key('Variable('Simple("key")))),, 'Variable(
              'Simple("val"))),, 'Block('ListWrap('If('Not('FunctionCall(
              'FunctionName("array_key_exists"),, 'ListWrap('Param('Variable(
              'Simple("key"))),, 'Param('Variable('Simple("op2")))))),, 'Block
              ('ListWrap('Return('Some('Null(.KList))))),, 'ListWrap('ElseIf(
              'Less('Variable('Simple("val")),, 'ArrayAccess('Variable('Simple
              ("op2")),, 'Some('Variable('Simple("key"))))),, 'Block('ListWrap
              ('Return('Some('Negative('LNumber('Deci("1")))))))),, 'ElseIf(
              'Greater('Variable('Simple("val")),, 'ArrayAccess('Variable(
              'Simple("op2")),, 'Some('Variable('Simple("key"))))),, 'Block(
              'ListWrap('Return('Some('LNumber('Deci("1")))))))))))),, 'Return
              ('Some('LNumber('Deci("0"))))) , @byValue , #symLoc(12) )
            "is_float" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(#is_float ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "key" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(#key ( 'Variable('Simple("x")) ))) , @byRef , 
              #symLoc(4) )
            "next" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(#next ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "print_r" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap(#print_r ( 'Variable('Simple("x")) )) , @byValue , 
              #symLoc(4) )
            "reset" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(#reset ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "strlen" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(#strlen ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "var_dump" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap(#var_dump ( 'Variable('Simple("x")) )) , @byValue , 
              #symLoc(4) )
        </functions>
        <consts>
            .Map
        </consts>
    </declarations>
    <control>
        <procStaticDecls>
            .K
        </procStaticDecls>
        <processedFunBody>
            .K
        </processedFunBody>
        <funInit>
            .K
        </funInit>
        <loopStack>
            .List
        </loopStack>
        <functionStack>
            .List
        </functionStack>
        <xStack>
            .List
        </xStack>
        <context>
            <object>
                .K
            </object>
            <function>
                #symLoc(1)
            </function>
            <cnrtForeachItem>
                .K
            </cnrtForeachItem>
            <class>
                .K
            </class>
        </context>
    </control>
    <IO>
        <exitStatus>
            0
        </exitStatus>
        <in>
            ListItem(#buffer ( "" ))
            ListItem(#istream ( 0 ))
        </in>
        <out>
            ListItem(#ostream ( 1 ))
            ListItem(#buffer ( "" ))
        </out>
    </IO>
    <script>
        <k>
            .K
        </k>
        <commands>
            .K
        </commands>
        <decl>
            .K
        </decl>
    </script>
    <mem>
        #symLoc(1) |-> zval ( (Array ( none , .List )) , array , 1 , false
           )
        #symLoc(2) |-> zval ( (Array ( ([ "_GET" , none , #symLoc(9) ]) , 
          ListItem([ "_GET" , none , #symLoc(9) ]) ListItem([ "_COOKIE" , none
           , #symLoc(10) ]) ListItem([ "_POST" , none , #symLoc(11) ]) 
          ListItem([ "GLOBALS" , none , #symLoc(3) ]) )) , array , 1 , false )
        #symLoc(3) |-> zval ( (Array ( ([ "obj" , none , #symLoc(16) ]) , 
          ListItem([ "obj" , none , #symLoc(16) ]) )) , array , 1 , false )
        #symLoc(4) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(5) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(6) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(7) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(8) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(9) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(10) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(11) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(12) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(14) |-> zval ( (Array ( ([ "static" , none , #symLoc(15) ]) , 
          ListItem([ "static" , none , #symLoc(15) ]) )) , array , 1 , false )
        #symLoc(15) |-> zval ( "static" , string , 1 , false )
        #symLoc(16) |-> zval ( (OID ( #symLoc(17) , Foo , 0 )) , object , 1 , 
          false )
        #symLoc(17) |-> zval ( (Array ( ([ "x" , none , #symLoc(18) ]) , 
          ListItem([ "x" , none , #symLoc(18) ]) ListItem([ "y" , (pri ( Foo )
          ) , #symLoc(19) ]) ListItem([ "z" , pro , #symLoc(20) ]) )) , array 
          , 2 , true )
        #symLoc(18) |-> zval ( false , bool , 1 , false )
        #symLoc(19) |-> zval ( true , bool , 1 , false )
        #symLoc(20) |-> zval ( 123 , int , 1 , false )
    </mem>
    <classInstanceCounters>
        Exception |-> 0
        Foo |-> 0
        stdClass |-> 0
    </classInstanceCounters>
</T>
