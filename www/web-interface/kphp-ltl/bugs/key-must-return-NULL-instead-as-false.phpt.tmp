<kphp>
    <trace>
        ListItem("built-init-state")
        ListItem("init-scopes")
        ListItem("init-builtin-functions")
        ListItem("init-builtin-classes")
        ListItem("make-exception")
        ListItem("class-no-extends")
        ListItem("class")
        ListItem("create-empty-class")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("init-class-cons")
        ListItem("init-class-member-decl-static")
        ListItem("write-class-instance-members-no-default")
        ListItem("write-class-instance-members")
        ListItem("write-class-instance-members-nil")
        ListItem("init-class-cons")
        ListItem("init-class-member-decl-meth-no-modifiers")
        ListItem("init-class-member-decl-meth")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("make-static-decls")
        ListItem("write-class-method")
        ListItem("init-class-cons")
        ListItem("init-class-member-decl-meth-no-modifiers")
        ListItem("init-class-member-decl-meth")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("make-static-decls")
        ListItem("write-class-method")
        ListItem("init-class-nil")
        ListItem("make-stdClass")
        ListItem("class-stdClass")
        ListItem("class")
        ListItem("create-empty-class")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("init-class-nil")
        ListItem("init-superglobals")
        ListItem("array-literal")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-array-literal")
        ListItem("make-array-literal")
        ListItem("array-create-empty")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("array-init-props-nil")
        ListItem("expr")
        ListItem("array-literal")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-array-literal")
        ListItem("make-array-literal")
        ListItem("array-create-empty")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("array-init-props-nil")
        ListItem("expr")
        ListItem("array-literal")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-array-literal")
        ListItem("make-array-literal")
        ListItem("array-create-empty")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("array-init-props-nil")
        ListItem("expr")
        ListItem("ref-assign-fresh-array-elem")
        ListItem("array-update-elem-create")
        ListItem("array-create-elem")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("expr")
        ListItem("build-array-compare")
        ListItem("function-decl-ret-value")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("make-static-decls")
        ListItem("make-function")
        ListItem("document-3")
        ListItem("echo-nil")
        ListItem("refactor-cons-no-fun")
        ListItem("refactor-cons-no-fun")
        ListItem("refactor-cons-no-fun")
        ListItem("refactor-nil")
        ListItem("run")
        ListItem("detect-deprecated")
        ListItem("make-static-decls")
        ListItem("make-static-decl-2")
        ListItem("make-static-decl-2")
        ListItem("class-no-extends")
        ListItem("class")
        ListItem("create-empty-class")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("init-class-cons")
        ListItem("init-class-member-decl-meth-no-modifiers")
        ListItem("init-class-member-decl-meth")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("make-static-decls")
        ListItem("write-class-method")
        ListItem("init-class-cons")
        ListItem("init-class-member-decl-meth-no-modifiers")
        ListItem("init-class-member-decl-meth")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("make-static-decls")
        ListItem("write-class-method")
        ListItem("init-class-nil")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("class-name-normal")
        ListItem("obj-creation-className2Id")
        ListItem("obj-creation")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-object-literal")
        ListItem("make-new-obj")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("obj-init")
        ListItem("built-obj-prop-list-parent")
        ListItem("built-obj-prop-list-root")
        ListItem("copy-value-to-loc-obj")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("run-constructor-none")
        ListItem("expr")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("meth-call-obj2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("meth-call")
        ListItem("meth-lookup-found")
        ListItem("meth-run-if-visib-non-static")
        ListItem("cond-true")
        ListItem("meth-exec")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-true")
        ListItem("alloc-crnt-obj")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("get-fun-decls")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("this-obj-cntx")
        ListItem("obj-access-RHS2Loc-ThisOrLiteral")
        ListItem("obj-access-simple")
        ListItem("array-literal")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-in-obj")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-array-literal")
        ListItem("literal-string")
        ListItem("single-quoted")
        ListItem("constant-encapsed-string")
        ListItem("make-array-literal")
        ListItem("array-create-empty")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("array-init-props-cons")
        ListItem("array-init-prop-def-key")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("array-init-props-nil")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("function-name")
        ListItem("func-call-vardump")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("function-name")
        ListItem("func-call")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("var2Id")
        ListItem("this-obj-cntx")
        ListItem("obj-access-RHS2Loc-ThisOrLiteral")
        ListItem("obj-access-simple")
        ListItem("process-fun-args-ref")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-false")
        ListItem("get-fun-decls")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("ref-assign-RHS2Loc")
        ListItem("lget-default")
        ListItem("lget-found-obj")
        ListItem("rget-default")
        ListItem("rget-obj-prop-public")
        ListItem("ref-assign-fresh-array-elem")
        ListItem("array-update-elem-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-2")
        ListItem("zval-write-refCount")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("key-arg2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("key-some")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-2")
        ListItem("zval-write-refCount")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("process-fun-args-param")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-false")
        ListItem("get-fun-decls")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("vardump-arg2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("vardump-int")
        ListItem("cond-false")
        ListItem("internal-print")
        ListItem("internal-print")
        ListItem("internal-print")
        ListItem("internal-print")
        ListItem("seq-empty")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-false")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("this-obj-cntx")
        ListItem("meth-call-obj2Loc")
        ListItem("meth-call")
        ListItem("meth-lookup-found")
        ListItem("meth-run-if-visib-non-static")
        ListItem("cond-true")
        ListItem("meth-exec")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-true")
        ListItem("alloc-crnt-obj")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("get-fun-decls")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("this-obj-cntx")
        ListItem("obj-access-RHS2Loc-ThisOrLiteral")
        ListItem("obj-access-simple")
        ListItem("return-arg2Loc")
        ListItem("rget-default")
        ListItem("rget-obj-prop-public")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("foreach-with-local-copy")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("push-loop-cntx")
        ListItem("foreach-spec")
        ListItem("seq-cons")
        ListItem("reset-array")
        ListItem("current-1b")
        ListItem("current-some")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("key-some")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("while-spec")
        ListItem("isNotIdentical")
        ListItem("isIdentical")
        ListItem("literal-false")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("isEqual-RHS2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("isEqual-RHS2LangValue")
        ListItem("comparison-identical-scalar")
        ListItem("not")
        ListItem("if-true-1")
        ListItem("seq-cons")
        ListItem("is-crnt-visib-array")
        ListItem("cond-true")
        ListItem("seq-cons")
        ListItem("init-foreach-iteration-vars-value")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("current-1b")
        ListItem("current-some")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign-RHS2LangValue-no-overflow")
        ListItem("read-loc")
        ListItem("zval-read-value")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("my-next-last-item")
        ListItem("current-1b")
        ListItem("current-none")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("key.none")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-found-array")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("seq-empty")
        ListItem("block")
        ListItem("seq-empty")
        ListItem("seq-cons")
        ListItem("loc-holds-compound-value-true")
        ListItem("if-true-1")
        ListItem("seq-empty")
        ListItem("seq-empty")
        ListItem("seq-cons")
        ListItem("while-spec")
        ListItem("isNotIdentical")
        ListItem("isIdentical")
        ListItem("literal-false")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("isEqual-RHS2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("isEqual-RHS2LangValue")
        ListItem("comparison-identical-scalar")
        ListItem("not")
        ListItem("if-false")
        ListItem("seq-empty")
        ListItem("seq-empty")
        ListItem("seq-empty")
        ListItem("pop-loop-cntx-special")
        ListItem("syncArrayCurrent-some")
        ListItem("seq-cons")
        ListItem("function-name")
        ListItem("func-call-vardump")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("function-name")
        ListItem("func-call")
        ListItem("run-function")
        ListItem("cond-false")
        ListItem("var2Id")
        ListItem("this-obj-cntx")
        ListItem("obj-access-RHS2Loc-ThisOrLiteral")
        ListItem("obj-access-simple")
        ListItem("process-fun-args-ref")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-false")
        ListItem("get-fun-decls")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("ref-assign-RHS2Loc")
        ListItem("lget-default")
        ListItem("lget-found-obj")
        ListItem("rget-default")
        ListItem("rget-obj-prop-public")
        ListItem("ref-assign-fresh-array-elem")
        ListItem("array-update-elem-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-2")
        ListItem("zval-write-refCount")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("key-arg2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("key.none")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-2")
        ListItem("zval-write-refCount")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("process-fun-args-param")
        ListItem("process-fun-args-empty")
        ListItem("push-stack-frame")
        ListItem("array-create-empty")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("set-crtn-scope")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("set-crnt-class")
        ListItem("cond-false")
        ListItem("get-fun-decls")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("assign-LHS2Loc")
        ListItem("lget-default")
        ListItem("lget-not-found-init-null")
        ListItem("alloc-value")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-undef")
        ListItem("zval-create")
        ListItem("array-create-elem-update-crnt")
        ListItem("inc-refCount-1")
        ListItem("zval-write-refCount")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("assign")
        ListItem("copy-value-to-loc-scalar")
        ListItem("write-loc-exists")
        ListItem("zval-write-value")
        ListItem("zval-write-type")
        ListItem("expr")
        ListItem("seq-cons")
        ListItem("var2Id")
        ListItem("cond-false")
        ListItem("vardump-arg2Loc")
        ListItem("rget-default")
        ListItem("rget-array-prop")
        ListItem("vardump-bool")
        ListItem("cond-false")
        ListItem("internal-print")
        ListItem("internal-print")
        ListItem("cond-false")
        ListItem("internal-print")
        ListItem("internal-print")
        ListItem("seq-empty")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-false")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("expr")
        ListItem("seq-empty")
        ListItem("return")
        ListItem("cond-false")
        ListItem("set-crtn-scope")
        ListItem("set-crnt-class")
        ListItem("set-crnt-obj")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-true")
        ListItem("dec-refCount-compound-array")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-false")
        ListItem("dec-refCount-array-elems-cons")
        ListItem("dec-refCount-3")
        ListItem("zval-write-refCount")
        ListItem("cond-false")
        ListItem("dec-refCount-array-elems-nil")
        ListItem("pop-stack-frame")
        ListItem("expr")
        ListItem("literal-string")
        ListItem("echo-cons")
        ListItem("toString-string")
        ListItem("internal-print")
        ListItem("echo-nil")
        ListItem("termination")
        ListItem("post-exec-ops")
    </trace>
    <gc>
        <gcEnabled>
            false
        </gcEnabled>
        <locationsToCollect>
            .List
        </locationsToCollect>
    </gc>
    <instrumentation>
        <isTerminated>
            true
        </isTerminated>
        <cleanTraceOnTermination>
            false
        </cleanTraceOnTermination>
        <label>
            "@"
        </label>
    </instrumentation>
    <scopes>
        <superGlobalScope>
            #symLoc(1)
        </superGlobalScope>
        <globalStaticScope>
            #symLoc(2)
        </globalStaticScope>
        <currentScope>
            #symLoc(3)
        </currentScope>
        <globalScope>
            #symLoc(3)
        </globalScope>
    </scopes>
    <control>
        <functionArgumentsDeclaration>
            .K
        </functionArgumentsDeclaration>
        <processedStaticDeclarations>
            .K
        </processedStaticDeclarations>
        <processedFunBody>
            .K
        </processedFunBody>
        <loopStack>
            .List
        </loopStack>
        <functionStack>
            .List
        </functionStack>
        <exceptionStack>
            .List
        </exceptionStack>
        <context>
            <object>
                .K
            </object>
            <function>
                #symLoc(15)
            </function>
            <currentForeachItem>
                #symLoc(20)
            </currentForeachItem>
            <class>
                .K
            </class>
        </context>
    </control>
    <IO>
        <exitStatus>
            0
        </exitStatus>
        <errorManagement>
            0
        </errorManagement>
        <varDumpLevel>
            0
        </varDumpLevel>
        <in>
            ListItem(#buffer ( "" ))
            ListItem(#istream ( 0 ))
        </in>
        <out>
            ListItem(#ostream ( 1 ))
            ListItem(#buffer ( "" ))
        </out>
    </IO>
    <script>
        <k>
            .K
        </k>
        <commands>
            .K
        </commands>
        <declarations>
            .K
        </declarations>
    </script>
    <tables>
        <classes>
            Exception |-> class ( stdClass , ListItem(prop ( "errorMsg" , 
              public , NULL )) , "Exception" |-> method ( (f ( 'ListWrap(
              'Param('Variable('Simple("msg")))) , 'ListWrap('Expr('Assign(
              'ObjectAccess('Variable('Simple("this")),, 'ObjectProperty(
              'Simple("errorMsg"))),, 'Variable('Simple("msg"))))) , @byValue 
              , #symLoc(6) )) , public , false ) "getMessage" |-> method ( (f 
              ( 'ListWrap(.KList) , 'ListWrap('Return('Some('ObjectAccess(
              'Variable('Simple("this")),, 'ObjectProperty('Simple("errorMsg")
              ))))) , @byValue , #symLoc(7) )) , public , false ) , #symLoc(5)
               )
            Test |-> class ( stdClass , .List , "getArr" |-> method ( (f ( 
              'ListWrap(.KList) , 'ListWrap('Return('Some('ObjectAccess(
              'Variable('Simple("this")),, 'ObjectProperty('Simple("arr"))))))
               , @byValue , #symLoc(15) )) , public , false ) "run" |-> method
               ( (f ( 'ListWrap(.KList) , 'ListWrap('Expr('Assign(
              'ObjectAccess('Variable('Simple("this")),, 'ObjectProperty(
              'Simple("arr"))),, 'Array('ListWrap('Pair('None(.KList),, 'Value
              ('ConstantEncapsedString('SingleQuoted('ListWrap('Literal("item"
              )))))))))),, 'Expr('FunctionCall('FunctionName("var_dump"),, 
              'ListWrap('Param('FunctionCall('FunctionName("key"),, 'ListWrap(
              'Param('ObjectAccess('Variable('Simple("this")),, 
              'ObjectProperty('Simple("arr")))))))))),, 'ForEach('FunctionCall
              ('Variable('Simple("this")),, 'ObjectProperty('Simple("getArr"))
              ,, 'ListWrap(.KList)),, 'Pattern('None(.KList),, 'Variable(
              'Simple("v"))),, 'Block('ListWrap(.KList))),, 'Expr(
              'FunctionCall('FunctionName("var_dump"),, 'ListWrap('Param(
              'FunctionCall('FunctionName("key"),, 'ListWrap('Param(
              'ObjectAccess('Variable('Simple("this")),, 'ObjectProperty(
              'Simple("arr"))))))))))) , @byValue , #symLoc(14) )) , public , 
              false ) , #symLoc(13) )
            stdClass |-> class ( ROOT , .List , .Map , #symLoc(8) )
        </classes>
        <functions>
            "array_key_exists" |-> f ( 'ListWrap('Param('Variable('Simple("k")
              )),, 'ParamRef('Variable('Simple("x")))) , 'ListWrap('Return(
              array_key_exists ( 'Variable('Simple("k")) , 'Variable('Simple(
              "x")) ))) , @byValue , #symLoc(4) )
            "count" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(count ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "current" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(current ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "define" |-> f ( 'ListWrap('Param('Variable('Simple("name"))),, 
              'Param('Variable('Simple("value")))) , 'ListWrap('Return(define 
              ( 'Variable('Simple("name")) , 'Variable('Simple("value")) ))) ,
               @byValue , #symLoc(4) )
            "defined" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(defined ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "each" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(each ( 'Variable('Simple("x")) ))) , @byValue 
              , #symLoc(4) )
            "gettype" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(gettype ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "isEqualArray" |-> f ( 'ListWrap('Param('Variable('Simple("op1")))
              ,, 'Param('Variable('Simple("op2")))) , 'ListWrap('If('Less(
              'FunctionCall('FunctionName("count"),, 'ListWrap('Param(
              'Variable('Simple("op1"))))),, 'FunctionCall('FunctionName(
              "count"),, 'ListWrap('Param('Variable('Simple("op2")))))),, 
              'Block('ListWrap('Return('Some('Negative('LNumber('Deci("1")))))
              )),, 'ListWrap('ElseIf('Greater('FunctionCall('FunctionName(
              "count"),, 'ListWrap('Param('Variable('Simple("op1"))))),, 
              'FunctionCall('FunctionName("count"),, 'ListWrap('Param(
              'Variable('Simple("op2")))))),, 'Block('ListWrap('Return('Some(
              'LNumber('Deci("1"))))))))),, 'ForEach('Variable('Simple("op1"))
              ,, 'Pattern('Some('Key('Variable('Simple("key")))),, 'Variable(
              'Simple("val"))),, 'Block('ListWrap('If('Not('FunctionCall(
              'FunctionName("array_key_exists"),, 'ListWrap('Param('Variable(
              'Simple("key"))),, 'Param('Variable('Simple("op2")))))),, 'Block
              ('ListWrap('Return('Some('Null(.KList))))),, 'ListWrap('ElseIf(
              'Less('Variable('Simple("val")),, 'ArrayAccess('Variable('Simple
              ("op2")),, 'Some('Variable('Simple("key"))))),, 'Block('ListWrap
              ('Return('Some('Negative('LNumber('Deci("1")))))))),, 'ElseIf(
              'Greater('Variable('Simple("val")),, 'ArrayAccess('Variable(
              'Simple("op2")),, 'Some('Variable('Simple("key"))))),, 'Block(
              'ListWrap('Return('Some('LNumber('Deci("1")))))))))))),, 'Return
              ('Some('LNumber('Deci("0"))))) , @byValue , #symLoc(12) )
            "is_array" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(is_array ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "is_float" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(is_float ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "is_numeric" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(is_numeric ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "is_scalar" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(is_scalar ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "is_string" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(is_string ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "key" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(key ( 'Variable('Simple("x")) ))) , @byValue ,
               #symLoc(4) )
            "label" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(label ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "next" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(next ( 'Variable('Simple("x")) ))) , @byValue 
              , #symLoc(4) )
            "print_r" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap(print_r ( 'Variable('Simple("x")) )) , @byValue , 
              #symLoc(4) )
            "reset" |-> f ( 'ListWrap('ParamRef('Variable('Simple("x")))) , 
              'ListWrap('Return(reset ( 'Variable('Simple("x")) ))) , @byValue
               , #symLoc(4) )
            "strlen" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap('Return(strlen ( 'Variable('Simple("x")) ))) , 
              @byValue , #symLoc(4) )
            "substr" |-> f ( 'ListWrap('Param('Variable('Simple("str"))),, 
              'Param('Variable('Simple("start"))),, 'ParamDefault('Variable(
              'Simple("len")),, 999)) , 'ListWrap('Return(substr ( 'Variable(
              'Simple("str")) , 'Variable('Simple("start")) , 'Variable(
              'Simple("len")) ))) , @byValue , #symLoc(4) )
            "user_input" |-> f ( 'ListWrap(.KList) , 'ListWrap('Return(
              user_input)) , @byValue , #symLoc(4) )
            "var_dump" |-> f ( 'ListWrap('Param('Variable('Simple("x")))) , 
              'ListWrap(var_dump ( 'Variable('Simple("x")) )) , @byValue , 
              #symLoc(4) )
        </functions>
        <constants>
            .Map
        </constants>
        <classInstanceCounters>
            Exception |-> 0
            Test |-> 0
            stdClass |-> 0
        </classInstanceCounters>
    </tables>
    <heap>
        #symLoc(1) |-> zval ( (Array ( ([ "_GET" , public , #symLoc(9) ]) , 
          ListItem([ "_GET" , public , #symLoc(9) ]) ListItem([ "_COOKIE" , 
          public , #symLoc(10) ]) ListItem([ "_POST" , public , #symLoc(11) ])
           ListItem([ "GLOBALS" , public , #symLoc(3) ]) )) , array , 1 , 
          false )
        #symLoc(2) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(3) |-> zval ( (Array ( ([ "test" , public , #symLoc(16) ]) , 
          ListItem([ "test" , public , #symLoc(16) ]) )) , array , 1 , false )
        #symLoc(4) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(5) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(6) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(7) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(8) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(9) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(10) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(11) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(12) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(13) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(14) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(15) |-> zval ( (Array ( none , .List )) , array , 1 , false )
        #symLoc(16) |-> zval ( (OID ( #symLoc(17) , Test , 0 )) , object , 1 ,
           false )
        #symLoc(17) |-> zval ( (Array ( ([ "arr" , public , #symLoc(20) ]) , 
          ListItem([ "arr" , public , #symLoc(20) ]) )) , array , 1 , false )
        #symLoc(18) |-> zval ( (Array ( ([ "crnt" , public , #symLoc(32) ]) , 
          ListItem([ "crnt" , public , #symLoc(32) ]) ListItem([ "v" , public 
          , #symLoc(33) ]) )) , array , 0 , false )
        #symLoc(19) |-> zval ( (OID ( #symLoc(17) , Test , 0 )) , object , 0 ,
           false )
        #symLoc(20) |-> zval ( (Array ( none , ListItem([ 0 , public , #symLoc
          (21) ]) )) , array , 1 , false )
        #symLoc(21) |-> zval ( "item" , string , 1 , false )
        #symLoc(22) |-> zval ( (Array ( ([ "x" , public , #symLoc(24) ]) , 
          ListItem([ "x" , public , #symLoc(24) ]) )) , array , 0 , false )
        #symLoc(23) |-> zval ( (Array ( ([ "x" , public , #symLoc(20) ]) , 
          ListItem([ "x" , public , #symLoc(20) ]) )) , array , 0 , false )
        #symLoc(24) |-> zval ( 0 , int , 0 , false )
        #symLoc(29) |-> zval ( (Array ( none , .List )) , array , 0 , false )
        #symLoc(30) |-> zval ( (OID ( #symLoc(17) , Test , 0 )) , object , 0 ,
           false )
        #symLoc(31) |-> zval ( (Array ( none , ListItem([ 0 , public , #symLoc
          (21) ]) )) , array , 0 , false )
        #symLoc(32) |-> zval ( false , bool , 0 , false )
        #symLoc(33) |-> zval ( "item" , string , 0 , false )
        #symLoc(34) |-> zval ( (Array ( ([ "x" , public , #symLoc(36) ]) , 
          ListItem([ "x" , public , #symLoc(36) ]) )) , array , 0 , false )
        #symLoc(35) |-> zval ( (Array ( ([ "x" , public , #symLoc(20) ]) , 
          ListItem([ "x" , public , #symLoc(20) ]) )) , array , 0 , false )
        #symLoc(36) |-> zval ( false , bool , 0 , false )
    </heap>
</kphp>