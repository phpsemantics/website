<testResults><passed><test><fileName>tests/zend/lang//001.phpt</fileName><outcome>pass</outcome><result>Yes</result><expected>Yes</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//002.phpt</fileName><outcome>pass</outcome><result>123456789</result><expected>123456789</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//003.phpt</fileName><outcome>pass</outcome><result>good</result><expected>good</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//004.phpt</fileName><outcome>pass</outcome><result>good</result><expected>good</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//005.phpt</fileName><outcome>pass</outcome><result>good</result><expected>good</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//006.phpt</fileName><outcome>pass</outcome><result>good</result><expected>good</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//008.phpt</fileName><outcome>pass</outcome><result>1 2 3 4 5 6 7 8 9</result><expected>1 2 3 4 5 6 7 8 9</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//009.phpt</fileName><outcome>pass</outcome><result>3</result><expected>3</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//010.phpt</fileName><outcome>pass</outcome><result>2</result><expected>2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//011.phpt</fileName><outcome>pass</outcome><result>4 Hello 4</result><expected>4 Hello 4</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//012.phpt</fileName><outcome>pass</outcome><result>HelloHello</result><expected>HelloHello</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//017.phpt</fileName><outcome>pass</outcome><result>1</result><expected>1</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//020.phpt</fileName><outcome>pass</outcome><result>In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100</result><expected>In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100
In branch 1
Inner default...
blah=100</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//021.phpt</fileName><outcome>pass</outcome><result>i=0
In branch 0
i=1
In branch 1
i=2
In branch 2
i=3
In branch 3
hi</result><expected>i=0
In branch 0
i=1
In branch 1
i=2
In branch 2
i=3
In branch 3
hi</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//022.phpt</fileName><outcome>pass</outcome><result>zero
one
2
3
4
5
6
7
8
9
zero
one
2
3
4
5
6
7
8
9
zero
one
2
3
4
5
6
7
8
9</result><expected>zero
one
2
3
4
5
6
7
8
9
zero
one
2
3
4
5
6
7
8
9
zero
one
2
3
4
5
6
7
8
9</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//025.phpt</fileName><outcome>pass</outcome><result>0  a  1  a  2  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 3  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 2  a  2  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 3  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10</result><expected>0  a  1  a  2  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 3  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 2  a  2  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 3  a  3  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 4  a  4  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 5  a  5  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 6  a  6  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 7  a  7  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10 
 b 8  a  8  a  9 
 b 10 
 b 9  a  9 
 b 10</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//027.phpt</fileName><outcome>pass</outcome><result>321</result><expected>321</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//030.phpt</fileName><outcome>pass</outcome><result>success</result><expected>success</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//032.phpt</fileName><outcome>pass</outcome><result>OK</result><expected>OK</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//033.phpt</fileName><outcome>pass</outcome><result>If: 11
While: 12346789
For: 0123401234
Switch: 1

===DONE===</result><expected>If: 11
While: 12346789
For: 0123401234
Switch: 1
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//035.phpt</fileName><outcome>pass</outcome><result>There was an exception: 'This is an exception!'</result><expected>There was an exception: 'This is an exception!'</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//036.phpt</fileName><outcome>pass</outcome><result>foo</result><expected>foo</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//037.phpt</fileName><outcome>pass</outcome><result>bar</result><expected>bar</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//040.phpt</fileName><outcome>pass</outcome><result>0
1

===DONE===</result><expected>0
1
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug21669.phpt</fileName><outcome>pass</outcome><result>Hello world</result><expected>Hello world</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug22231.phpt</fileName><outcome>pass</outcome><result>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
object(foo)#%d (1) {
  ["fubar"]=&gt;
  string(5) "fubar"
}
string(5) "fubar"
string(5) "fubar"
object(foo)#%d (1) {
  ["fubar"]=&gt;
  string(5) "fubar"
}
string(5) "fubar"
string(5) "fubar"</result><expected>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
object(foo)#%d (1) {
  ["fubar"]=&gt;
  string(5) "fubar"
}
string(5) "fubar"
string(5) "fubar"
object(foo)#%d (1) {
  ["fubar"]=&gt;
  string(5) "fubar"
}
string(5) "fubar"
string(5) "fubar"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23524.phpt</fileName><outcome>pass</outcome><result>Begin
Array
(
  [123]=&gt; 123
)
Array
(
  [123]=&gt; 123
)
Array
(
  [123]=&gt; 123
)
Done</result><expected>Begin
Array
(
    [123] =&gt; 123
)
Array
(
    [123] =&gt; 123
)
Array
(
    [123] =&gt; 123
)
Done</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23624.phpt</fileName><outcome>pass</outcome><result>string(3) "one"
bool(false)</result><expected>string(3) "one"
bool(false)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23922.phpt</fileName><outcome>pass</outcome><result>Unsupported feature: 'assert' not defined!</result><expected /><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24396.phpt</fileName><outcome>pass</outcome><result>(a =&gt; 1)
(b =&gt; 2)
(c =&gt; 3)</result><expected>(a =&gt; 1)
(b =&gt; 2)
(c =&gt; 3)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24573.phpt</fileName><outcome>pass</outcome><result>Fatal error: Cannot re-assign $this in %s on line %d</result><expected>Fatal error: Cannot re-assign $this in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug26182.phpt</fileName><outcome>pass</outcome><result>A Object
(
)</result><expected>A Object
(
)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug26696.phpt</fileName><outcome>pass</outcome><result>OK
OK</result><expected>OK
OK</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug26869.phpt</fileName><outcome>pass</outcome><result>array(1) {
  [1]=&gt;
  int(1)
}
bool(true)</result><expected>array(1) {
  [1]=&gt;
  int(1)
}
bool(true)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug27354.phpt</fileName><outcome>pass</outcome><result>int(0)
int(0)
int(0)
int(0)</result><expected>int(%i)
int(%i)
int(%i)
int(%i)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug27443.phpt</fileName><outcome>pass</outcome><result>boolean</result><expected>boolean</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug27535.phpt</fileName><outcome>pass</outcome><result>Alive!</result><expected>Alive!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug28800.phpt</fileName><outcome>pass</outcome><result>0
0
0
0
0
0</result><expected>0
0
0
0
0
0</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug30726.phpt</fileName><outcome>pass</outcome><result>1</result><expected>1</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug30862.phpt</fileName><outcome>pass</outcome><result>Array
(
  [0]=&gt; false
  [1]=&gt; true
)

----------
Array
(
  [0]=&gt; false
  [1]=&gt; true
)</result><expected>Array
(
    [0] =&gt; false
    [1] =&gt; true
)
----------
Array
(
    [0] =&gt; false
    [1] =&gt; true
)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug44654.phpt</fileName><outcome>pass</outcome><result>#1
#
#1</result><expected>#1##1</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug55754.phpt</fileName><outcome>pass</outcome><result>DONE</result><expected>DONE</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//comments.phpt</fileName><outcome>pass</outcome><result>#teste
#teste2
#ola
uhm # ah
e este, # hein?</result><expected>#teste
#teste2
#ola
uhm # ah
e este, # hein?</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//compare_objects_basic1.phpt</fileName><outcome>pass</outcome><result>Simple test for standard compare object handler

-- The following compare should return TRUE --
bool(true)

-- All the following compares should return FALSE --
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)

===DONE===</result><expected>Simple test for standard compare object handler

-- The following compare should return TRUE --
bool(true)

-- All the following compares should return FALSE --
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//empty_variation.phpt</fileName><outcome>pass</outcome><result>bool(true)
bool(true)
bool(true)</result><expected>bool(true)
bool(true)
bool(true)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_003.phpt</fileName><outcome>pass</outcome><result>Good call
Good call
Expect 15 and get...15
array(2) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(10)
}
  [1]=&gt;
  int(3)
}</result><expected>Good call
Good call
Expect 15 and get...15
array(2) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(10)
  }
  [1]=&gt;
  int(3)
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_004.phpt</fileName><outcome>pass</outcome><result>i1
i2
i3
i4
array(6) {
  [0]=&gt;
  int(10)
  [1]=&gt;
  int(11)
  [2]=&gt;
  int(0)
  [3]=&gt;
  int(30)
  [4]=&gt;
  int(40)
  [5]=&gt;
  int(3)
}</result><expected>i1
i2
i3
i4
array(6) {
  [0]=&gt;
  int(10)
  [1]=&gt;
  int(11)
  [2]=&gt;
  int(0)
  [3]=&gt;
  int(30)
  [4]=&gt;
  int(40)
  [5]=&gt;
  int(3)
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_005.phpt</fileName><outcome>pass</outcome><result>i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}</result><expected>i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_006.phpt</fileName><outcome>pass</outcome><result>i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
}
}</result><expected>i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
i1
i2
i3
i4
i5
i6
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(-2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}
array(1) {
  [0]=&gt;
  array(1) {
    [0]=&gt;
    int(2)
  }
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_009.phpt</fileName><outcome>pass</outcome><result>Function call args:
f(0) f(1) bool(true)
f(0) f(1) bool(true)
f(0) f(1) bool(false)
f(0) f(1) bool(false)

Array indices:
bool(true)
bool(true)
bool(false)
bool(false)</result><expected>Function call args:
f(0) f(1) bool(true)
f(0) f(1) bool(true)
f(0) f(1) bool(false)
f(0) f(1) bool(false)

Array indices:
bool(true)
bool(true)
bool(false)
bool(false)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//execution_order.phpt</fileName><outcome>pass</outcome><result>1)goodgood
2)goodgood
3)badgood
4)goodgood
5)badgood
6)goodgood
7)goodgood
8)goodgood
9)1
10)-1
11)0
12)0
13)0
14)0
15)400
16)400
17)300
18)300
19)500
20)800
21)220
22)600
23)210
24)600</result><expected>1)goodgood
2)goodgood
3)badgood
4)goodgood
5)badgood
6)goodgood
7)goodgood
8)goodgood
9)1
10)-1
11)0
12)0
13)0
14)0
15)400
16)400
17)300
18)300
19)500
20)800
21)220
22)600
23)210
24)600</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreach_with_object_001.phpt</fileName><outcome>pass</outcome><result>1
2
3
4
5

===DONE===</result><expected>1
2
3
4
5
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreach_with_references_001.phpt</fileName><outcome>pass</outcome><result>Array
(
  [1]=&gt; one
  [2]=&gt; two
  [3]=&gt; three
)
Array
(
  [1]=&gt; 1
  [2]=&gt; 2
  [3]=&gt; 3
)</result><expected>Array
(
    [1] =&gt; one
    [2] =&gt; two
    [3] =&gt; three
)
Array
(
    [1] =&gt; 1
    [2] =&gt; 2
    [3] =&gt; 3
)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.001.phpt</fileName><outcome>pass</outcome><result>string(1) "a"
string(1) "b"
string(1) "c"
int(0)
string(1) "a"
int(1)
string(1) "b"
int(2)
string(1) "c"
int(2)
string(1) "c"

string(1) "d"
string(1) "e"
string(1) "f"
int(0)
string(1) "d"
int(1)
string(1) "e"
int(2)
string(1) "f"
int(2)
string(1) "f"

bool(false)
bool(false)</result><expected>string(1) "a"
string(1) "b"
string(1) "c"
int(0)
string(1) "a"
int(1)
string(1) "b"
int(2)
string(1) "c"
int(2)
string(1) "c"

string(1) "d"
string(1) "e"
string(1) "f"
int(0)
string(1) "d"
int(1)
string(1) "e"
int(2)
string(1) "f"
int(2)
string(1) "f"

bool(false)
bool(false)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.004.phpt</fileName><outcome>pass</outcome><result>array(1) {
  [0]=&gt;
  string(1) "a"
}
array(1) {
  [0]=&gt;
  string(1) "b"
}
array(1) {
  [0]=&gt;
  string(1) "c"
}
array(3) {
  [0]=&gt;
  string(1) "a"
  [1]=&gt;
  string(1) "b"
  [2]=&gt;
  string(1) "c"
}
array(1) {
  [0]=&gt;
  string(1) "c"
}

int(0)
array(1) {
  [0]=&gt;
  string(1) "a"
}
int(1)
array(1) {
  [0]=&gt;
  string(1) "b"
}
int(2)
array(1) {
  [0]=&gt;
  string(1) "c"
}
array(3) {
  [0]=&gt;
  string(1) "a"
  [1]=&gt;
  string(1) "b"
  [2]=&gt;
  string(1) "c"
}
int(2)
array(1) {
  [0]=&gt;
  string(1) "c"
}</result><expected>array(1) {
  [0]=&gt;
  string(1) "a"
}
array(1) {
  [0]=&gt;
  string(1) "b"
}
array(1) {
  [0]=&gt;
  string(1) "c"
}
array(3) {
  [0]=&gt;
  string(1) "a"
  [1]=&gt;
  string(1) "b"
  [2]=&gt;
  string(1) "c"
}
array(1) {
  [0]=&gt;
  string(1) "c"
}

int(0)
array(1) {
  [0]=&gt;
  string(1) "a"
}
int(1)
array(1) {
  [0]=&gt;
  string(1) "b"
}
int(2)
array(1) {
  [0]=&gt;
  string(1) "c"
}
array(3) {
  [0]=&gt;
  string(1) "a"
  [1]=&gt;
  string(1) "b"
  [2]=&gt;
  string(1) "c"
}
int(2)
array(1) {
  [0]=&gt;
  string(1) "c"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.005.phpt</fileName><outcome>pass</outcome><result>After changing $a directly, $v@0 is: changed.0
After changing $a directly, $v@1 is: changed.1
After changing $a directly, $v@2 is: changed.2</result><expected>After changing $a directly, $v@0 is: changed.0
After changing $a directly, $v@1 is: changed.1
After changing $a directly, $v@2 is: changed.2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.001.phpt</fileName><outcome>pass</outcome><result>Simple loop.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(1) "a"
string(10) "Original a"
string(1) "b"
string(10) "Original b"
string(1) "c"
string(10) "Original c"

Check key and value after the loop.
string(1) "c"
string(10) "Original c"


Object instantiated inside loop.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(1) "a"
string(10) "Original a"
string(1) "b"
string(10) "Original b"
string(1) "c"
string(10) "Original c"

Check key and value after the loop.
string(1) "c"
string(10) "Original c"</result><expected>Simple loop.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(1) "a"
string(10) "Original a"
string(1) "b"
string(10) "Original b"
string(1) "c"
string(10) "Original c"

Check key and value after the loop.
string(1) "c"
string(10) "Original c"


Object instantiated inside loop.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(1) "a"
string(10) "Original a"
string(1) "b"
string(10) "Original b"
string(1) "c"
string(10) "Original c"

Check key and value after the loop.
string(1) "c"
string(10) "Original c"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.002.phpt</fileName><outcome>pass</outcome><result>Iterate over various generations from within overridden methods:

--&gt; Using instance of C:
in C::doForEachOnThis
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of D:
in D::doForEachOnThis
string(10) "Original f"
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
in E::doForEachOnThis
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(12) "Overridden e"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(9) "changed.e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}


Iterate over various generations from within an inherited method:

--&gt; Using instance of C:
in C::doForEachC
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of D:
in C::doForEachC
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of E:
in C::doForEachC
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original g"
string(10) "Original e"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}


Iterate over various generations from within an overridden static method:

--&gt; Using instance of C:
in C::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of D:
in C::doForEach
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(10) "Original f"
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
in C::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original g"
string(10) "Original e"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original f"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(12) "Overridden e"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(9) "changed.e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}


Iterate over various generations from outside the object:

--&gt; Using instance of C:
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of D:
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(10) "Original g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(12) "Overridden d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(10) "Original g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

===DONE===</result><expected>Iterate over various generations from within overridden methods:

--&gt; Using instance of C:
in C::doForEachOnThis
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of D:
in D::doForEachOnThis
string(10) "Original f"
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
in E::doForEachOnThis
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(12) "Overridden e"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(9) "changed.e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}


Iterate over various generations from within an inherited method:

--&gt; Using instance of C:
in C::doForEachC
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of D:
in C::doForEachC
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}

--&gt; Using instance of E:
in C::doForEachC
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original g"
string(10) "Original e"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}


Iterate over various generations from within an overridden static method:

--&gt; Using instance of C:
in C::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of D:
in C::doForEach
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(10) "Original f"
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(10) "Original g"
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
in C::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original g"
string(10) "Original e"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(9) "changed.e"
}
in D::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(10) "Original f"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(9) "changed.f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
in E::doForEach
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
string(12) "Overridden d"
string(12) "Overridden e"
string(10) "Original g"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(9) "changed.d"
  ["e":"E":private]=&gt;
  string(9) "changed.e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(9) "changed.g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}


Iterate over various generations from outside the object:

--&gt; Using instance of C:
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of D:
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(D)#%d (7) {
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(10) "Original g"
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

--&gt; Using instance of E:
string(12) "Overridden a"
string(12) "Overridden b"
string(12) "Overridden c"
object(E)#%d (8) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(12) "Overridden d"
  ["e":"E":private]=&gt;
  string(12) "Overridden e"
  ["f":"D":private]=&gt;
  string(10) "Original f"
  ["g":protected]=&gt;
  string(10) "Original g"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.003.phpt</fileName><outcome>pass</outcome><result>Directly changing object values.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Modifying the foreach $value.
object(C)#%d (5) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Modifying the foreach &amp;$value.
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Adding properties to an an object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(16) "Added property 0"
string(16) "Added property 1"
string(16) "Added property 2"
string(16) "Added property 3"
string(16) "Added property 4"
string(16) "Added property 5"
string(16) "Added property 6"
string(16) "Added property 7"
Loop detected
object(C)#%d (17) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
  ["new0"]=&gt;
  string(16) "Added property 0"
  ["new1"]=&gt;
  string(16) "Added property 1"
  ["new2"]=&gt;
  string(16) "Added property 2"
  ["new3"]=&gt;
  string(16) "Added property 3"
  ["new4"]=&gt;
  string(16) "Added property 4"
  ["new5"]=&gt;
  string(16) "Added property 5"
  ["new6"]=&gt;
  string(16) "Added property 6"
  ["new7"]=&gt;
  string(16) "Added property 7"
  ["new8"]=&gt;
  string(16) "Added property 8"
  ["new9"]=&gt;
  string(16) "Added property 9"
  ["new10"]=&gt;
  string(17) "Added property 10"
  ["new11"]=&gt;
  string(17) "Added property 11"
}

Adding properties to an an object, using &amp;$value.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(16) "Added property 0"
string(16) "Added property 1"
string(16) "Added property 2"
string(16) "Added property 3"
string(16) "Added property 4"
string(16) "Added property 5"
string(16) "Added property 6"
string(16) "Added property 7"
Loop detected
object(C)#%d (17) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
  ["new0"]=&gt;
  string(16) "Added property 0"
  ["new1"]=&gt;
  string(16) "Added property 1"
  ["new2"]=&gt;
  string(16) "Added property 2"
  ["new3"]=&gt;
  string(16) "Added property 3"
  ["new4"]=&gt;
  string(16) "Added property 4"
  ["new5"]=&gt;
  string(16) "Added property 5"
  ["new6"]=&gt;
  string(16) "Added property 6"
  ["new7"]=&gt;
  string(16) "Added property 7"
  ["new8"]=&gt;
  &amp;string(16) "Added property 8"
  ["new9"]=&gt;
  string(16) "Added property 9"
  ["new10"]=&gt;
  string(17) "Added property 10"
  ["new11"]=&gt;
  string(17) "Added property 11"
}

Removing properties from an object.
string(10) "Original a"
object(C)#%d (2) {
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Removing properties from an object, using &amp;$value.
string(10) "Original a"
object(C)#%d (2) {
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

===DONE===</result><expected>Directly changing object values.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Modifying the foreach $value.
object(C)#%d (5) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Modifying the foreach &amp;$value.
object(C)#%d (5) {
  ["a"]=&gt;
  string(9) "changed.a"
  ["b"]=&gt;
  string(9) "changed.b"
  ["c"]=&gt;
  &amp;string(9) "changed.c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Adding properties to an an object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(16) "Added property 0"
string(16) "Added property 1"
string(16) "Added property 2"
string(16) "Added property 3"
string(16) "Added property 4"
string(16) "Added property 5"
string(16) "Added property 6"
string(16) "Added property 7"
Loop detected
object(C)#%d (17) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
  ["new0"]=&gt;
  string(16) "Added property 0"
  ["new1"]=&gt;
  string(16) "Added property 1"
  ["new2"]=&gt;
  string(16) "Added property 2"
  ["new3"]=&gt;
  string(16) "Added property 3"
  ["new4"]=&gt;
  string(16) "Added property 4"
  ["new5"]=&gt;
  string(16) "Added property 5"
  ["new6"]=&gt;
  string(16) "Added property 6"
  ["new7"]=&gt;
  string(16) "Added property 7"
  ["new8"]=&gt;
  string(16) "Added property 8"
  ["new9"]=&gt;
  string(16) "Added property 9"
  ["new10"]=&gt;
  string(17) "Added property 10"
  ["new11"]=&gt;
  string(17) "Added property 11"
}

Adding properties to an an object, using &amp;$value.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(16) "Added property 0"
string(16) "Added property 1"
string(16) "Added property 2"
string(16) "Added property 3"
string(16) "Added property 4"
string(16) "Added property 5"
string(16) "Added property 6"
string(16) "Added property 7"
Loop detected
object(C)#%d (17) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
  ["new0"]=&gt;
  string(16) "Added property 0"
  ["new1"]=&gt;
  string(16) "Added property 1"
  ["new2"]=&gt;
  string(16) "Added property 2"
  ["new3"]=&gt;
  string(16) "Added property 3"
  ["new4"]=&gt;
  string(16) "Added property 4"
  ["new5"]=&gt;
  string(16) "Added property 5"
  ["new6"]=&gt;
  string(16) "Added property 6"
  ["new7"]=&gt;
  string(16) "Added property 7"
  ["new8"]=&gt;
  &amp;string(16) "Added property 8"
  ["new9"]=&gt;
  string(16) "Added property 9"
  ["new10"]=&gt;
  string(17) "Added property 10"
  ["new11"]=&gt;
  string(17) "Added property 11"
}

Removing properties from an object.
string(10) "Original a"
object(C)#%d (2) {
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}

Removing properties from an object, using &amp;$value.
string(10) "Original a"
object(C)#%d (2) {
  ["d":protected]=&gt;
  string(10) "Original d"
  ["e":"C":private]=&gt;
  string(10) "Original e"
}
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.005.phpt</fileName><outcome>pass</outcome><result>Removing properties before the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (4) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}

Removing properties before the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (4) {
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}</result><expected>Removing properties before the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (4) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}

Removing properties before the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (4) {
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.006.phpt</fileName><outcome>pass</outcome><result>Substituting the iterated object for a different object.
string(10) "Original a"
string(10) "Original b"
string(5) "new a"
string(5) "new b"
string(5) "new c"
string(5) "new d"
string(5) "new e"
string(5) "new f"
object(stdClass)#%d (6) {
  ["a"]=&gt;
  string(5) "new a"
  ["b"]=&gt;
  string(5) "new b"
  ["c"]=&gt;
  string(5) "new c"
  ["d"]=&gt;
  string(5) "new d"
  ["e"]=&gt;
  string(5) "new e"
  ["f"]=&gt;
  string(5) "new f"
}

Substituting the iterated object for an array.
string(10) "Original a"
string(10) "Original b"
int(1)
int(2)
int(3)
int(4)
int(5)
int(6)
int(7)
int(8)
array(8) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
  [3]=&gt;
  int(4)
  [4]=&gt;
  int(5)
  [5]=&gt;
  int(6)
  [6]=&gt;
  int(7)
  [7]=&gt;
  int(8)
}

Substituting the iterated array for an object.
int(1)
int(2)
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}</result><expected>Substituting the iterated object for a different object.
string(10) "Original a"
string(10) "Original b"
string(5) "new a"
string(5) "new b"
string(5) "new c"
string(5) "new d"
string(5) "new e"
string(5) "new f"
object(stdClass)#%d (6) {
  ["a"]=&gt;
  string(5) "new a"
  ["b"]=&gt;
  string(5) "new b"
  ["c"]=&gt;
  string(5) "new c"
  ["d"]=&gt;
  string(5) "new d"
  ["e"]=&gt;
  string(5) "new e"
  ["f"]=&gt;
  string(5) "new f"
}

Substituting the iterated object for an array.
string(10) "Original a"
string(10) "Original b"
int(1)
int(2)
int(3)
int(4)
int(5)
int(6)
int(7)
int(8)
array(8) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
  [3]=&gt;
  int(4)
  [4]=&gt;
  int(5)
  [5]=&gt;
  int(6)
  [6]=&gt;
  int(7)
  [7]=&gt;
  int(8)
}

Substituting the iterated array for an object.
int(1)
int(2)
string(10) "Original a"
string(10) "Original b"
string(10) "Original c"
string(10) "Original d"
string(10) "Original e"
object(C)#%d (5) {
  ["a"]=&gt;
  string(10) "Original a"
  ["b"]=&gt;
  string(10) "Original b"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//FUN_001.phpt</fileName><outcome>pass</outcome><result>6</result><expected>6</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//fun_002.phpt</fileName><outcome>pass</outcome><result>hey=0, 0
hey=1, -1
hey=2, -2</result><expected>hey=0, 0
hey=1, -1
hey=2, -2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//FUN_003.phpt</fileName><outcome>pass</outcome><result>hey
blah
hey
blah
Counting from 7 to 14
7
8
9
10
11
12
13
14
hey
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
and now, from a function...
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
------
720
840
3
4
5</result><expected>hey
blah
hey
blah
Counting from 7 to 14
7
8
9
10
11
12
13
14
hey
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
factorial(5) = 120
factorial(6) = 720
factorial(7) = 5040
factorial(8) = 40320
factorial(9) = 362880
factorial(10) = 3628800
and now, from a function...
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
(it should break at 5...)
factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
------
720
840
3
4
5</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//FUN_004.phpt</fileName><outcome>pass</outcome><result>Before function declaration...
After function declaration...
Calling function for the first time...
----
In function, printing the string "This works!" 10 times
0) This works!
1) This works!
2) This works!
3) This works!
4) This works!
5) This works!
6) This works!
7) This works!
8) This works!
9) This works!
Done with function...
-----
Returned from function call...
Calling the function for the second time...
----
In function, printing the string "This like, really works and stuff..." 3 times
0) This like, really works and stuff...
1) This like, really works and stuff...
2) This like, really works and stuff...
Done with function...
-----
Returned from function call...
This is some other function, to ensure more than just one function works fine...</result><expected>Before function declaration...
After function declaration...
Calling function for the first time...
----
In function, printing the string "This works!" 10 times
0) This works!
1) This works!
2) This works!
3) This works!
4) This works!
5) This works!
6) This works!
7) This works!
8) This works!
9) This works!
Done with function...
-----
Returned from function call...
Calling the function for the second time...
----
In function, printing the string "This like, really works and stuff..." 3 times
0) This like, really works and stuff...
1) This like, really works and stuff...
2) This like, really works and stuff...
Done with function...
-----
Returned from function call...
This is some other function, to ensure more than just one function works fine...</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_001.phpt</fileName><outcome>pass</outcome><result>int(7)
int(15)
int(7)
int(16)
array(1) {
  [0]=&gt;
  &amp;int(1)
}
int(1)</result><expected>int(7)
int(15)
int(7)
int(16)
array(1) {
  [0]=&gt;
  &amp;int(1)
}
int(1)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_008.phpt</fileName><outcome>pass</outcome><result>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
string(9) "changed.y"


-- Ref, Val --
string(10) "original.b"
string(10) "original.b"
string(9) "changed.x"</result><expected>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
string(9) "changed.y"


-- Ref, Val --
string(10) "original.b"
string(10) "original.b"
string(9) "changed.x"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_009.phpt</fileName><outcome>pass</outcome><result>1012</result><expected>1012</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.001.phpt</fileName><outcome>pass</outcome><result>int(7)
int(8)</result><expected>int(7)
int(8)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.009.phpt</fileName><outcome>pass</outcome><result>---&gt; 1. Return a variable by reference -&gt; No warning:
int(1)

---&gt; 2. Return a value by reference -&gt; Warning:

Notice: Only variable references should be returned by reference in %s on line %d
int(1)</result><expected>---&gt; 1. Return a variable by reference -&gt; No warning:
int(1)

---&gt; 2. Return a value by reference -&gt; Warning:

Notice: Only variable references should be returned by reference in %s on line %d
int(1)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//short_tags.001.phpt</fileName><outcome>pass</outcome><result>Used a short tag

Finished</result><expected>Used a short tag
Finished</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//static_basic_001.phpt</fileName><outcome>pass</outcome><result>Same variable used as static and non static.
---------
0
10
---------
0
11
---------
0
12

Lots of initialisations in the same statement.
------------- Call 0 --------------
Unitialised      : 
Initialised to 10: 10
Initialised to 20: 20
Unitialised      : 
Initialised to 30: 30
------------- Call 1 --------------
Unitialised      : 1
Initialised to 10: 11
Initialised to 20: 21
Unitialised      : 1
Initialised to 30: 31
------------- Call 2 --------------
Unitialised      : 2
Initialised to 10: 12
Initialised to 20: 22
Unitialised      : 2
Initialised to 30: 32

Using static keyword at global scope
 10
1 11
2 12</result><expected>Same variable used as static and non static.
---------
0
10
---------
0
11
---------
0
12

Lots of initialisations in the same statement.
------------- Call 0 --------------
Unitialised      : 
Initialised to 10: 10
Initialised to 20: 20
Unitialised      : 
Initialised to 30: 30
------------- Call 1 --------------
Unitialised      : 1
Initialised to 10: 11
Initialised to 20: 21
Unitialised      : 1
Initialised to 30: 31
------------- Call 2 --------------
Unitialised      : 2
Initialised to 10: 12
Initialised to 20: 22
Unitialised      : 2
Initialised to 30: 32

Using static keyword at global scope
 10
1 11
2 12</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//static_basic_002.phpt</fileName><outcome>pass</outcome><result>int(5)
int(11)
int(14)</result><expected>int(5)
int(11)
int(14)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//this_assignment.phpt</fileName><outcome>pass</outcome><result>firstfirstfirstfirstsecondsecondsecondsecondsecond

===DONE===</result><expected>firstfirstfirstfirstsecondsecondsecondsecondsecond
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test></passed><failed><test><fileName>tests/zend/lang//026.phpt</fileName><outcome>fail</outcome><result /><expected>"	\'\n\'a\\b\</expected><k>&lt;k&gt;
            'SingleQuoted('ListWrap(&amp;quot;\\n&amp;quot;,, &amp;quot;\\&amp;quot;,, &amp;quot;'&amp;quot;,, &amp;quot;a&amp;quot;,, &amp;quot;\\&amp;quot;,, &amp;quot;\\b&amp;quot;,, 
              &amp;quot;\\&amp;quot;)) ~&amp;gt; 'ConstantEncapsedString(HOLE) ~&amp;gt; 'Concat(&amp;quot;\&amp;quot;\t\\'&amp;quot;,, 
              HOLE) ~&amp;gt; 'Echo('ListWrap(HOLE)) ~&amp;gt; 'Echo('ListWrap('Literal(&amp;quot;\n&amp;quot;
              )))
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//031.phpt</fileName><outcome>fail</outcome><result>Correct - with inner loop reset.
inloop 0 for key1
inloop 1 for key1
inloop 0 for key2
inloop 1 for key2
What happens without inner loop reset.
inloop 0 for key1
inloop 1 for key1
What happens without inner loop reset but copy.
inloop 0 for key1
inloop 1 for key1
What happens with inner loop reset over copy.
inloop 0 for key1
inloop 1 for key1
inloop 0 for key2
inloop 1 for key2</result><expected>Correct - with inner loop reset.
inloop 0 for key1
inloop 1 for key1
inloop 0 for key2
inloop 1 for key2
What happens without inner loop reset.
inloop 0 for key1
inloop 1 for key1
What happens without inner loop reset but copy.
inloop 0 for key1
inloop 1 for key1
inloop 0 for key2
inloop 1 for key2
What happens with inner loop reset over copy.
inloop 0 for key1
inloop 1 for key1
inloop 0 for key2
inloop 1 for key2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24403.phpt</fileName><outcome>fail</outcome><result /><expected>Deprecated: preg_replace(): The /e modifier is deprecated, use preg_replace_callback instead in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug29893.phpt</fileName><outcome>fail</outcome><result /><expected>Warning: Cannot use a scalar value as an array in %sbug29893.php on line %d
===DONE===</expected><k>&lt;k&gt;
            BinOp ( min , NULL , 0 ) ~&amp;gt; 'Assign(lref ( (ref ( #symLoc(3) , 
              &amp;quot;base&amp;quot; )) , 50 , arr ),, HOLE) ~&amp;gt; 'Expr(HOLE) ~&amp;gt; 'Echo('ListWrap
              ('Literal(&amp;quot;\n===DONE===\n&amp;quot;)))
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//short_tags.002.phpt</fileName><outcome>fail</outcome><result>Used a short tag

Finished</result><expected>&lt;?
echo "Used a short tag\n";
?&gt;
Finished</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//string_decimals_001.phpt</fileName><outcome>fail</outcome><result>--&gt; Testing ..9:
int(0)
float(0)
bool(false)

--&gt; Testing .9.:
int(0)
float(9.0000000000000002e-1)
bool(true)

--&gt; Testing 9..:
int(9)
float(9)
bool(true)

--&gt; Testing 9.9.:
int(9)
float(9.9000000000000004)
bool(true)

--&gt; Testing 9.9.9:
int(9)
float(9.9000000000000004)
bool(true)

===DONE===</result><expected>--&gt; Testing ..9:
int(0)
float(0)
bool(false)

--&gt; Testing .9.:
int(0)
float(0.9)
bool(true)

--&gt; Testing 9..:
int(9)
float(9)
bool(true)

--&gt; Testing 9.9.:
int(9)
float(9.9)
bool(true)

--&gt; Testing 9.9.9:
int(9)
float(9.9)
bool(true)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//type_hints_003.phpt</fileName><outcome>fail</outcome><result /><expected>Fatal error: Default value for parameters with a class type hint can only be NULL in %stype_hints_003.php on line 3</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test></failed><not-supported><test><fileName>tests/zend/lang//007.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>1 5 2 2 10 5  2 5 3 2 10 5  3 5 4 2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//013.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>Hello</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//014.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>Hello</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//015.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>Hello</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//016.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>Hello</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//018.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>hey
0
hey
1
hey
2
hey
3
hey
4
hey
5
hey
6
hey
7
hey
8
hey
9</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//019.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!
hey, this is a regular echo'd eval()
hey, this is a function inside an eval()!

Parse error: syntax error, unexpected %s in %s019.php(12) : eval()'d code on line 1</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//023.phpt</fileName><outcome>not_supported</outcome><result>PHP Regression Test

Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>PHP Regression Test

&lt;html&gt;
&lt;head&gt;

*** Testing assignments and variable aliasing: ***&lt;br&gt;
This should read "blah": blah&lt;br&gt;
This should read "this is nifty": this is nifty&lt;br&gt;
*************************************************&lt;br&gt;

*** Testing integer operators ***&lt;br&gt;
Correct result - 8:  8&lt;br&gt;
Correct result - 8:  8&lt;br&gt;
Correct result - 2:  2&lt;br&gt;
Correct result - -2:  -2&lt;br&gt;
Correct result - 15:  15&lt;br&gt;
Correct result - 15:  15&lt;br&gt;
Correct result - 2:  2&lt;br&gt;
Correct result - 3:  3&lt;br&gt;
*********************************&lt;br&gt;

*** Testing real operators ***&lt;br&gt;
Correct result - 8:  8&lt;br&gt;
Correct result - 8:  8&lt;br&gt;
Correct result - 2:  2&lt;br&gt;
Correct result - -2:  -2&lt;br&gt;
Correct result - 15:  15&lt;br&gt;
Correct result - 15:  15&lt;br&gt;
Correct result - 2:  2&lt;br&gt;
Correct result - 3:  3&lt;br&gt;
*********************************&lt;br&gt;

*** Testing if/elseif/else control ***&lt;br&gt;

This  works&lt;br&gt;
this_still_works&lt;br&gt;
should_print&lt;br&gt;


*** Seriously nested if's test ***&lt;br&gt;
** spelling correction by kluzz **
Only two lines of text should follow:&lt;br&gt;
this should be displayed. should be:  $i=1, $j=0.  is:  $i=1, $j=0&lt;br&gt;
this is supposed to be displayed. should be:  $i=2, $j=4.  is:  $i=2, $j=4&lt;br&gt;
3 loop iterations should follow:&lt;br&gt;
2 4&lt;br&gt;
3 4&lt;br&gt;
4 4&lt;br&gt;
**********************************&lt;br&gt;

*** C-style else-if's ***&lt;br&gt;
This should be displayed&lt;br&gt;
*************************&lt;br&gt;

*** WHILE tests ***&lt;br&gt;
0 is smaller than 20&lt;br&gt;
1 is smaller than 20&lt;br&gt;
2 is smaller than 20&lt;br&gt;
3 is smaller than 20&lt;br&gt;
4 is smaller than 20&lt;br&gt;
5 is smaller than 20&lt;br&gt;
6 is smaller than 20&lt;br&gt;
7 is smaller than 20&lt;br&gt;
8 is smaller than 20&lt;br&gt;
9 is smaller than 20&lt;br&gt;
10 is smaller than 20&lt;br&gt;
11 is smaller than 20&lt;br&gt;
12 is smaller than 20&lt;br&gt;
13 is smaller than 20&lt;br&gt;
14 is smaller than 20&lt;br&gt;
15 is smaller than 20&lt;br&gt;
16 is smaller than 20&lt;br&gt;
17 is smaller than 20&lt;br&gt;
18 is smaller than 20&lt;br&gt;
19 is smaller than 20&lt;br&gt;
20 equals 20&lt;br&gt;
21 is greater than 20&lt;br&gt;
22 is greater than 20&lt;br&gt;
23 is greater than 20&lt;br&gt;
24 is greater than 20&lt;br&gt;
25 is greater than 20&lt;br&gt;
26 is greater than 20&lt;br&gt;
27 is greater than 20&lt;br&gt;
28 is greater than 20&lt;br&gt;
29 is greater than 20&lt;br&gt;
30 is greater than 20&lt;br&gt;
31 is greater than 20&lt;br&gt;
32 is greater than 20&lt;br&gt;
33 is greater than 20&lt;br&gt;
34 is greater than 20&lt;br&gt;
35 is greater than 20&lt;br&gt;
36 is greater than 20&lt;br&gt;
37 is greater than 20&lt;br&gt;
38 is greater than 20&lt;br&gt;
39 is greater than 20&lt;br&gt;
*******************&lt;br&gt;


*** Nested WHILEs ***&lt;br&gt;
Each array variable should be equal to the sum of its indices:&lt;br&gt;
${test00}[0] = 0&lt;br&gt;
${test00}[1] = 1&lt;br&gt;
${test00}[2] = 2&lt;br&gt;
${test01}[0] = 1&lt;br&gt;
${test01}[1] = 2&lt;br&gt;
${test01}[2] = 3&lt;br&gt;
${test02}[0] = 2&lt;br&gt;
${test02}[1] = 3&lt;br&gt;
${test02}[2] = 4&lt;br&gt;
${test10}[0] = 1&lt;br&gt;
${test10}[1] = 2&lt;br&gt;
${test10}[2] = 3&lt;br&gt;
${test11}[0] = 2&lt;br&gt;
${test11}[1] = 3&lt;br&gt;
${test11}[2] = 4&lt;br&gt;
${test12}[0] = 3&lt;br&gt;
${test12}[1] = 4&lt;br&gt;
${test12}[2] = 5&lt;br&gt;
${test20}[0] = 2&lt;br&gt;
${test20}[1] = 3&lt;br&gt;
${test20}[2] = 4&lt;br&gt;
${test21}[0] = 3&lt;br&gt;
${test21}[1] = 4&lt;br&gt;
${test21}[2] = 5&lt;br&gt;
${test22}[0] = 4&lt;br&gt;
${test22}[1] = 5&lt;br&gt;
${test22}[2] = 6&lt;br&gt;
*********************&lt;br&gt;

*** hash test... ***&lt;br&gt;
commented out...
**************************&lt;br&gt;

*** Hash resizing test ***&lt;br&gt;
ba&lt;br&gt;
baa&lt;br&gt;
baaa&lt;br&gt;
baaaa&lt;br&gt;
baaaaa&lt;br&gt;
baaaaaa&lt;br&gt;
baaaaaaa&lt;br&gt;
baaaaaaaa&lt;br&gt;
baaaaaaaaa&lt;br&gt;
baaaaaaaaaa&lt;br&gt;
ba&lt;br&gt;
10&lt;br&gt;
baa&lt;br&gt;
9&lt;br&gt;
baaa&lt;br&gt;
8&lt;br&gt;
baaaa&lt;br&gt;
7&lt;br&gt;
baaaaa&lt;br&gt;
6&lt;br&gt;
baaaaaa&lt;br&gt;
5&lt;br&gt;
baaaaaaa&lt;br&gt;
4&lt;br&gt;
baaaaaaaa&lt;br&gt;
3&lt;br&gt;
baaaaaaaaa&lt;br&gt;
2&lt;br&gt;
baaaaaaaaaa&lt;br&gt;
1&lt;br&gt;
**************************&lt;br&gt;


*** break/continue test ***&lt;br&gt;
$i should go from 0 to 2&lt;br&gt;
$j should go from 3 to 4, and $q should go from 3 to 4&lt;br&gt;
  $j=3&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
  $j=4&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
$j should go from 0 to 2&lt;br&gt;
  $j=0&lt;br&gt;
  $j=1&lt;br&gt;
  $j=2&lt;br&gt;
$k should go from 0 to 2&lt;br&gt;
    $k=0&lt;br&gt;
    $k=1&lt;br&gt;
    $k=2&lt;br&gt;
$i=0&lt;br&gt;
$j should go from 3 to 4, and $q should go from 3 to 4&lt;br&gt;
  $j=3&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
  $j=4&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
$j should go from 0 to 2&lt;br&gt;
  $j=0&lt;br&gt;
  $j=1&lt;br&gt;
  $j=2&lt;br&gt;
$k should go from 0 to 2&lt;br&gt;
    $k=0&lt;br&gt;
    $k=1&lt;br&gt;
    $k=2&lt;br&gt;
$i=1&lt;br&gt;
$j should go from 3 to 4, and $q should go from 3 to 4&lt;br&gt;
  $j=3&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
  $j=4&lt;br&gt;
    $q=3&lt;br&gt;
    $q=4&lt;br&gt;
$j should go from 0 to 2&lt;br&gt;
  $j=0&lt;br&gt;
  $j=1&lt;br&gt;
  $j=2&lt;br&gt;
$k should go from 0 to 2&lt;br&gt;
    $k=0&lt;br&gt;
    $k=1&lt;br&gt;
    $k=2&lt;br&gt;
$i=2&lt;br&gt;
***********************&lt;br&gt;

*** Nested file include test ***&lt;br&gt;
&lt;html&gt;
This is Finish.phtml.  This file is supposed to be included 
from regression_test.phtml.  This is normal HTML.
and this is PHP code, 2+2=4
&lt;/html&gt;
********************************&lt;br&gt;

Tests completed.&lt;br&gt;
Limor Ullmann is now Limor Baruch :I</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//028.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>0
Dafna!
I'm still alive
Hey there!!
0
1
Dafna!
I'm still alive
Hey there!!
1
2
Dafna!
I'm still alive
Hey there!!
2
3
Dafna!
I'm still alive
Hey there!!
3
4
Dafna!
I'm still alive
Hey there!!
4
5
Dafna!
I'm still alive
Hey there!!
5
6
Dafna!
I'm still alive
Hey there!!
6
7
Dafna!
I'm still alive
Hey there!!
7
8
Dafna!
I'm still alive
Hey there!!
8
9
Dafna!
I'm still alive
Hey there!!
9
10
Dafna!
I'm still alive
Hey there!!
10
11
Dafna!
I'm still alive
Hey there!!
11
12
Dafna!
I'm still alive
Hey there!!
12
13
Dafna!
I'm still alive
Hey there!!
13
14
Dafna!
I'm still alive
Hey there!!
14
15
Dafna!
I'm still alive
Hey there!!
15
16
Dafna!
I'm still alive
Hey there!!
16
17
Dafna!
I'm still alive
Hey there!!
17
18
Dafna!
I'm still alive
Hey there!!
18
19
Dafna!
I'm still alive
Hey there!!
19
20
Dafna!
I'm still alive
Hey there!!
20
21
Dafna!
I'm still alive
Hey there!!
21
22
Dafna!
I'm still alive
Hey there!!
22
23
Dafna!
I'm still alive
Hey there!!
23
24
Dafna!
I'm still alive
Hey there!!
24
25
Dafna!
I'm still alive
Hey there!!
25
26
Dafna!
I'm still alive
Hey there!!
26
27
Dafna!
I'm still alive
Hey there!!
27
28
Dafna!
I'm still alive
Hey there!!
28
29
Dafna!
I'm still alive
Hey there!!
29
30
Dafna!
I'm still alive
Hey there!!
30
31
Dafna!
I'm still alive
Hey there!!
31
32
Dafna!
I'm still alive
Hey there!!
32
33
Dafna!
I'm still alive
Hey there!!
33
34
Dafna!
I'm still alive
Hey there!!
34
35
Dafna!
I'm still alive
Hey there!!
35
36
Dafna!
I'm still alive
Hey there!!
36
37
Dafna!
I'm still alive
Hey there!!
37
38
Dafna!
I'm still alive
Hey there!!
38
39
Dafna!
I'm still alive
Hey there!!
39
40
Dafna!
I'm still alive
Hey there!!
40
41
Dafna!
I'm still alive
Hey there!!
41
42
Dafna!
I'm still alive
Hey there!!
42
43
Dafna!
I'm still alive
Hey there!!
43
44
Dafna!
I'm still alive
Hey there!!
44
45
Dafna!
I'm still alive
Hey there!!
45
46
Dafna!
I'm still alive
Hey there!!
46
47
Dafna!
I'm still alive
Hey there!!
47
48
Dafna!
I'm still alive
Hey there!!
48
49
Dafna!
I'm still alive
Hey there!!
49
50
Dafna!
I'm still alive
Hey there!!
50
51
Dafna!
I'm still alive
Hey there!!
51
52
Dafna!
I'm still alive
Hey there!!
52
53
Dafna!
I'm still alive
Hey there!!
53
54
Dafna!
I'm still alive
Hey there!!
54
55
Dafna!
I'm still alive
Hey there!!
55
56
Dafna!
I'm still alive
Hey there!!
56
57
Dafna!
I'm still alive
Hey there!!
57
58
Dafna!
I'm still alive
Hey there!!
58
59
Dafna!
I'm still alive
Hey there!!
59
60
Dafna!
I'm still alive
Hey there!!
60
61
Dafna!
I'm still alive
Hey there!!
61
62
Dafna!
I'm still alive
Hey there!!
62
63
Dafna!
I'm still alive
Hey there!!
63
64
Dafna!
I'm still alive
Hey there!!
64
65
Dafna!
I'm still alive
Hey there!!
65
66
Dafna!
I'm still alive
Hey there!!
66
67
Dafna!
I'm still alive
Hey there!!
67
68
Dafna!
I'm still alive
Hey there!!
68
69
Dafna!
I'm still alive
Hey there!!
69
70
Dafna!
I'm still alive
Hey there!!
70
71
Dafna!
I'm still alive
Hey there!!
71
72
Dafna!
I'm still alive
Hey there!!
72
73
Dafna!
I'm still alive
Hey there!!
73
74
Dafna!
I'm still alive
Hey there!!
74
75
Dafna!
I'm still alive
Hey there!!
75
76
Dafna!
I'm still alive
Hey there!!
76
77
Dafna!
I'm still alive
Hey there!!
77
78
Dafna!
I'm still alive
Hey there!!
78
79
Dafna!
I'm still alive
Hey there!!
79
80
Dafna!
I'm still alive
Hey there!!
80
81
Dafna!
I'm still alive
Hey there!!
81
82
Dafna!
I'm still alive
Hey there!!
82
83
Dafna!
I'm still alive
Hey there!!
83
84
Dafna!
I'm still alive
Hey there!!
84
85
Dafna!
I'm still alive
Hey there!!
85
86
Dafna!
I'm still alive
Hey there!!
86
87
Dafna!
I'm still alive
Hey there!!
87
88
Dafna!
I'm still alive
Hey there!!
88
89
Dafna!
I'm still alive
Hey there!!
89
90
Dafna!
I'm still alive
Hey there!!
90
91
Dafna!
I'm still alive
Hey there!!
91
92
Dafna!
I'm still alive
Hey there!!
92
93
Dafna!
I'm still alive
Hey there!!
93
94
Dafna!
I'm still alive
Hey there!!
94
95
Dafna!
I'm still alive
Hey there!!
95
96
Dafna!
I'm still alive
Hey there!!
96
97
Dafna!
I'm still alive
Hey there!!
97
98
Dafna!
I'm still alive
Hey there!!
98
99
Dafna!
I'm still alive
Hey there!!
99
100
Dafna!
I'm still alive
Hey there!!
100
101
Dafna!
I'm still alive
Hey there!!
101
102
Dafna!
I'm still alive
Hey there!!
102
103
Dafna!
I'm still alive
Hey there!!
103
104
Dafna!
I'm still alive
Hey there!!
104
105
Dafna!
I'm still alive
Hey there!!
105
106
Dafna!
I'm still alive
Hey there!!
106
107
Dafna!
I'm still alive
Hey there!!
107
108
Dafna!
I'm still alive
Hey there!!
108
109
Dafna!
I'm still alive
Hey there!!
109
110
Dafna!
I'm still alive
Hey there!!
110
111
Dafna!
I'm still alive
Hey there!!
111
112
Dafna!
I'm still alive
Hey there!!
112
113
Dafna!
I'm still alive
Hey there!!
113
114
Dafna!
I'm still alive
Hey there!!
114
115
Dafna!
I'm still alive
Hey there!!
115
116
Dafna!
I'm still alive
Hey there!!
116
117
Dafna!
I'm still alive
Hey there!!
117
118
Dafna!
I'm still alive
Hey there!!
118
119
Dafna!
I'm still alive
Hey there!!
119
120
Dafna!
I'm still alive
Hey there!!
120
121
Dafna!
I'm still alive
Hey there!!
121
122
Dafna!
I'm still alive
Hey there!!
122
123
Dafna!
I'm still alive
Hey there!!
123
124
Dafna!
I'm still alive
Hey there!!
124
125
Dafna!
I'm still alive
Hey there!!
125
126
Dafna!
I'm still alive
Hey there!!
126
127
Dafna!
I'm still alive
Hey there!!
127
128
Dafna!
I'm still alive
Hey there!!
128
129
Dafna!
I'm still alive
Hey there!!
129
130
Dafna!
I'm still alive
Hey there!!
130
131
Dafna!
I'm still alive
Hey there!!
131
132
Dafna!
I'm still alive
Hey there!!
132
133
Dafna!
I'm still alive
Hey there!!
133
134
Dafna!
I'm still alive
Hey there!!
134
135
Dafna!
I'm still alive
Hey there!!
135
136
Dafna!
I'm still alive
Hey there!!
136
137
Dafna!
I'm still alive
Hey there!!
137
138
Dafna!
I'm still alive
Hey there!!
138
139
Dafna!
I'm still alive
Hey there!!
139
140
Dafna!
I'm still alive
Hey there!!
140
141
Dafna!
I'm still alive
Hey there!!
141
142
Dafna!
I'm still alive
Hey there!!
142
143
Dafna!
I'm still alive
Hey there!!
143
144
Dafna!
I'm still alive
Hey there!!
144
145
Dafna!
I'm still alive
Hey there!!
145
146
Dafna!
I'm still alive
Hey there!!
146
147
Dafna!
I'm still alive
Hey there!!
147
148
Dafna!
I'm still alive
Hey there!!
148
149
Dafna!
I'm still alive
Hey there!!
149
150
Dafna!
I'm still alive
Hey there!!
150
151
Dafna!
I'm still alive
Hey there!!
151
152
Dafna!
I'm still alive
Hey there!!
152
153
Dafna!
I'm still alive
Hey there!!
153
154
Dafna!
I'm still alive
Hey there!!
154
155
Dafna!
I'm still alive
Hey there!!
155
156
Dafna!
I'm still alive
Hey there!!
156
157
Dafna!
I'm still alive
Hey there!!
157
158
Dafna!
I'm still alive
Hey there!!
158
159
Dafna!
I'm still alive
Hey there!!
159
160
Dafna!
I'm still alive
Hey there!!
160
161
Dafna!
I'm still alive
Hey there!!
161
162
Dafna!
I'm still alive
Hey there!!
162
163
Dafna!
I'm still alive
Hey there!!
163
164
Dafna!
I'm still alive
Hey there!!
164
165
Dafna!
I'm still alive
Hey there!!
165
166
Dafna!
I'm still alive
Hey there!!
166
167
Dafna!
I'm still alive
Hey there!!
167
168
Dafna!
I'm still alive
Hey there!!
168
169
Dafna!
I'm still alive
Hey there!!
169
170
Dafna!
I'm still alive
Hey there!!
170
171
Dafna!
I'm still alive
Hey there!!
171
172
Dafna!
I'm still alive
Hey there!!
172
173
Dafna!
I'm still alive
Hey there!!
173
174
Dafna!
I'm still alive
Hey there!!
174
175
Dafna!
I'm still alive
Hey there!!
175
176
Dafna!
I'm still alive
Hey there!!
176
177
Dafna!
I'm still alive
Hey there!!
177
178
Dafna!
I'm still alive
Hey there!!
178
179
Dafna!
I'm still alive
Hey there!!
179
180
Dafna!
I'm still alive
Hey there!!
180
181
Dafna!
I'm still alive
Hey there!!
181
182
Dafna!
I'm still alive
Hey there!!
182
183
Dafna!
I'm still alive
Hey there!!
183
184
Dafna!
I'm still alive
Hey there!!
184
185
Dafna!
I'm still alive
Hey there!!
185
186
Dafna!
I'm still alive
Hey there!!
186
187
Dafna!
I'm still alive
Hey there!!
187
188
Dafna!
I'm still alive
Hey there!!
188
189
Dafna!
I'm still alive
Hey there!!
189
190
Dafna!
I'm still alive
Hey there!!
190
191
Dafna!
I'm still alive
Hey there!!
191
192
Dafna!
I'm still alive
Hey there!!
192
193
Dafna!
I'm still alive
Hey there!!
193
194
Dafna!
I'm still alive
Hey there!!
194
195
Dafna!
I'm still alive
Hey there!!
195
196
Dafna!
I'm still alive
Hey there!!
196
197
Dafna!
I'm still alive
Hey there!!
197
198
Dafna!
I'm still alive
Hey there!!
198
199
Dafna!
I'm still alive
Hey there!!
199
Dafna</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//034.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'setlocale' not defined!</result><expected>3,14</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//038.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>string(15) "Error2Exception"
string(5) "fopen"
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//039.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'InterfaceDecl</result><expected>Catchable
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//045.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_time_limit' not defined!</result><expected>Fatal error: Maximum execution time of 1 second exceeded in %s on line %d

Fatal error: Maximum execution time of 1 second exceeded in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bison1.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>blah-</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug18872.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: ClassConstantDeclList</result><expected>3
3</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug19566.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'get_declared_classes' not defined!</result><expected>int(%d)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug19943.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ErrorFree</result><expected>0 -- 0
1 -- 1
2 -- 2
3 -- 3
4 -- 4
5 -- 5
6 -- 6
7 -- 7
8 -- 8
9 -- 9
string(10) "0123456780"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug20175.phpt</fileName><outcome>not_supported</outcome><result>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
Unsupported feature: 'zend_version' not defined!</result><expected>Deprecated: Assigning the return value of new by reference is deprecated in %s.php on line %d
%s
foo_static()
foo_global()
foo:1
foo_static()
foo:1
bar_static()
bar_global()

Strict Standards: Only variables should be assigned by reference in %sbug20175.php on line 47
bar:1
bar_static()
bar:1
wow_static()
wow_global()
wow:1
wow_static()
wow:1
oop_test()
oop_static()
oop_class()
oop:1
oop_static()
oop:1
oop_test()
oop_static()
oop:1</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug21094.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>[1024] errstr: test, errfile: %s, errline: %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug21849.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: ClassConstantDeclList</result><expected>fubar</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug22510.phpt</fileName><outcome>not_supported</outcome><result>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
Unsupported feature: 'MagicConstant</result><expected>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
ok1
bar::run1
foo::method1

Notice: Only variable references should be returned by reference in %s on line %d
foo::method1

Notice: Only variable references should be returned by reference in %s on line %d
foo::finalize
done!
ok2
bar::run2
foo::method2
foo::method2
foo::finalize
done!
ok3
bar::run3
foo::method3
foo::method3
foo::finalize
done!
ouch
bar::run1
foo::method1

Notice: Only variable references should be returned by reference in %s on line %d
foo::method1

Notice: Only variable references should be returned by reference in %s on line %d
foo::finalize
I'm alive!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug22592.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>string(5) "* *-*"
string(7) "* *-* *"
string(7) "*4*-* *"
string(7) "*4*s* *"
string(8) "*4*s* *0"
string(8) "*-*-* *0"
string(8) "*-*s*s*0"
string(8) "4-4s4s*0"
string(9) "4-4s4s505"
string(9) "454s4s505"
string(1) "-"
string(1) "s"
string(1) "4"
string(1) "5"
string(1) "5"
[Illegal string offset:  -1]</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug22690.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'create_function' not defined!</result><expected>BAR
BAR</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23279.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ob_start' not defined!</result><expected>Goodbye Cruel World</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23384.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: ClassConstantDeclList</result><expected>Strict Standards: Non-static method Foo::test() should not be called statically in %sbug23384.php on line %d
Array
(
    [100] =&gt; ten
)
Array
(
    [10] =&gt; ten
)
100100</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23489.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ob_start' not defined!</result><expected>success</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug23584.phpt</fileName><outcome>not_supported</outcome><result>#!php
Unsupported feature: 'error_reporting' not defined!</result><expected>Notice: Undefined variable:.*foo in .* on line 6</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24054.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'is_int' not defined!</result><expected>1,1,0,0
OK</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24499.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ErrorFree</result><expected>stdClass Object
(
    [foo] =&gt; bar
    [id] =&gt; bar
)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24640.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'var_export' not defined!</result><expected>1.7E+300
float(1.7E+300)
1.7E+300
1.7E+300
------
1.7E-300
float(1.7E-300)
1.7E-300
1.7E-300
------
1.7E+79
float(1.7E+79)
1.7E+79
1.7E+79
------
1.7E-79
float(1.7E-79)
1.7E-79
1.7E-79
------
1.7E+80
float(1.7E+80)
1.7E+80
1.7E+80
------
1.7E-80
float(1.7E-80)
1.7E-80
1.7E-80
------
1.7E+81
float(1.7E+81)
1.7E+81
1.7E+81
------
1.7E-81
float(1.7E-81)
1.7E-81
1.7E-81
------
I%s
float(I%s)
I%s
I%s
------
1.69998107421E-319
float(1.69998107421E-319)
1.69998107421E-319
1.69998107421E-319
------
I%s
float(I%s)
I%s
I%s
------
1.70007988734E-320
float(1.70007988734E-320)
1.70007988734E-320
1.70007988734E-320
------
I%s
float(I%s)
I%s
I%s
------
1.69958582169E-321
float(1.69958582169E-321)
1.69958582169E-321
1.69958582169E-321
------
I%s
float(I%s)
I%s
I%s
------
0
float(0)
0
0
------
I%s
float(I%s)
I%s
I%s
------
0
float(0)
0
0
------
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24652.phpt</fileName><outcome>not_supported</outcome><result>array(1) {
  [7]=&gt;
  int(0)
}
bool(true)
bool(false)
----------
Unsupported feature: 'array_flip' not defined!</result><expected>array(1) {
  [7]=&gt;
  int(0)
}
bool(true)
bool(true)
----------
array(1) {
  [7]=&gt;
  int(0)
}
bool(true)
bool(true)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24658.phpt</fileName><outcome>not_supported</outcome><result>object(foo)#%d (0) {
}
Unsupported feature: Type hints</result><expected>object(foo)#%d (0) {
}
object(foo)#%d (0) {
}
object(foo)#%d (0) {
}
object(foo)#%d (0) {
}
===no_typehint===
object(foo)#%d (0) {
}
int(1)
int(2)
===no_typehint_ref===
object(foo)#%d (0) {
}
int(1)
int(2)
===typehint===
object(foo)#%d (0) {
}

Catchable fatal error: Argument 1 passed to typehint() must be an instance of foo, integer given in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24783.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>7: foo%00bar =&gt; foo%00bar</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24926.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>FOO
FOO</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24951.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ob_start' not defined!</result><expected>[Hello from t1 1 Hello from t1 2 ]

[Hello from t2 1 Hello from t2 2 ]

Hello from t3 2 ]</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug25145.phpt</fileName><outcome>not_supported</outcome><result>KPHP ERROR: GET and POST not supported yet.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug25547.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>handler(Undefined index: foo)
Array
(
    [foo] =&gt; 1
)
Done</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug25922.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>Undefined variable: data
Undefined index here: ''</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug28213.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>.*#1\s*include.*</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug29944.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'preg_match' not defined!</result><expected>1
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug30578.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>This should be displayed first.
Buffered data: This should be displayed last.</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug30638.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'setlocale' not defined!</result><expected>decimal_point: ,
thousands_sep: .</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug32828.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ob_start' not defined!</result><expected>Fatal error: Uncaught exception 'Exception' in %s:%d
Stack trace:
#0 [internal function]: output_handler('', %d)
#1 %s(%d): ob_end_clean()
#2 {main}
  thrown in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug32924.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: IncludeOnce</result><expected>Included!
END</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug35176.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'RequireOnce not supported</result><expected>&lt;br /&gt;
&lt;b&gt;Warning&lt;/b&gt;:  require_once(nonexisiting.php) [&lt;a href='/function.require-once.html'&gt;function.require-once.html&lt;/a&gt;]: failed to open stream: No such file or directory in &lt;b&gt;%sbug35176.php&lt;/b&gt; on line &lt;b&gt;2&lt;/b&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;Fatal error&lt;/b&gt;:  require_once() [&lt;a href='/function.require.html'&gt;function.require.html&lt;/a&gt;]: Failed opening required 'nonexisiting.php' (%s) in &lt;b&gt;%sbug35176.php&lt;/b&gt; on line &lt;b&gt;2&lt;/b&gt;&lt;br /&gt;</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug38579.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'dirname' not defined!</result><expected>ok</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug43958.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>Warning: include(file-which-does-not-exist-on-purpose.php): failed to open stream: No such file or directory in %sbug43958.php on line 5

Warning: include(): Failed opening 'file-which-does-not-exist-on-purpose.php' for inclusion (include_path='%s') in %sbug43958.php on line 5</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug44827.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'constant' not defined!</result><expected>Warning: Class constants cannot be defined or redefined in %s on line %d

Warning: constant(): Couldn't find constant :: in %s on line %d
NULL</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug45392.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'MagicConstant</result><expected>2
Fatal error: Allowed memory size of %d bytes exhausted%s</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug7515.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'ob_start' not defined!</result><expected>Warning: Creating default object from empty value in %s on line %d
success</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//catchable_error_001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: Type hints</result><expected>Catchable fatal error: Argument 1 passed to blah() must be an instance of Foo, instance of stdClass given, called in %scatchable_error_001.php on line 15 and defined in %scatchable_error_001.php on line 5</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//catchable_error_002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>array(5) {
  [0]=&gt;
  int(4096)
  [1]=&gt;
  string(%d) "Argument 1 passed to blah() must be an instance of Foo, instance of stdClass given, called in %scatchable_error_002.php on line %d and defined"
  [2]=&gt;
  string(%d) "%scatchable_error_002.php"
  [3]=&gt;
  int(5)
  [4]=&gt;
  array(0) {
  }
}
ALIVE!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//compare_objects_basic2.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'date_default_timezone_set' not defined!</result><expected>Simple test comparing two objects with different compare callback handler
bool(false)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//each_binary_safety.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>7: foo%00bar =&gt; foo%00bar</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_008.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>$i=f(): good
$$x=f(): good
${'i'}=f(): good
$i[0]=f(): good
$i[0][0]=f(): good
$i-&gt;p=f(): 
Warning: Creating default object from empty value in %s on line %d
good
$i-&gt;p-&gt;q=f(): 
Warning: Creating default object from empty value in %s on line %d
good
$i-&gt;p[0]=f(): good
$i-&gt;p[0]-&gt;p=f(): 
Warning: Creating default object from empty value in %s on line %d
good
C::$p=f(): good
C::$p[0]=f(): good
C::$p-&gt;q=f(): good</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//error_2_exception_001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'set_error_handler' not defined!</result><expected>There was an exception: 256, 'I will become an exception'</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.010.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'array_push' not defined!</result><expected>int(1)
int(2)
int(3)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.012.phpt</fileName><outcome>not_supported</outcome><result>Popping elements off end of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>Popping elements off end of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(0) {
}

---( Array with 4 element(s): )---
--&gt; State of array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(0) {
}



Shift elements off start of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(0) {
}

---( Array with 4 element(s): )---
--&gt; State of array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(0) {
}



Remove current element of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(0) {
}

---( Array with 4 element(s): )---
--&gt; State of array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(0) {
}



Adding elements to the end of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(5) "new.0"
}

---( Array with 2 element(s): )---
--&gt; State of array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(5) "new.0"
  [3]=&gt;
  string(5) "new.1"
}

---( Array with 3 element(s): )---
--&gt; State of array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(6) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(5) "new.0"
  [4]=&gt;
  string(5) "new.1"
  [5]=&gt;
  string(5) "new.2"
}

---( Array with 4 element(s): )---
--&gt; State of array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(8) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
  [4]=&gt;
  string(5) "new.0"
  [5]=&gt;
  string(5) "new.1"
  [6]=&gt;
  string(5) "new.2"
  [7]=&gt;
  string(5) "new.3"
}



Adding elements to the start of an unreferenced array
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(2) {
  [0]=&gt;
  string(5) "new.0"
  [1]=&gt;
  string(3) "v.0"
}

---( Array with 2 element(s): )---
--&gt; State of array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(4) {
  [0]=&gt;
  string(5) "new.1"
  [1]=&gt;
  string(5) "new.0"
  [2]=&gt;
  string(3) "v.0"
  [3]=&gt;
  string(3) "v.1"
}

---( Array with 3 element(s): )---
--&gt; State of array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(6) {
  [0]=&gt;
  string(5) "new.2"
  [1]=&gt;
  string(5) "new.1"
  [2]=&gt;
  string(5) "new.0"
  [3]=&gt;
  string(3) "v.0"
  [4]=&gt;
  string(3) "v.1"
  [5]=&gt;
  string(3) "v.2"
}

---( Array with 4 element(s): )---
--&gt; State of array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(8) {
  [0]=&gt;
  string(5) "new.3"
  [1]=&gt;
  string(5) "new.2"
  [2]=&gt;
  string(5) "new.1"
  [3]=&gt;
  string(5) "new.0"
  [4]=&gt;
  string(3) "v.0"
  [5]=&gt;
  string(3) "v.1"
  [6]=&gt;
  string(3) "v.2"
  [7]=&gt;
  string(3) "v.3"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.014.phpt</fileName><outcome>not_supported</outcome><result>Popping elements off end of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>Popping elements off end of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of referenced array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of referenced array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}

---( Array with 4 element(s): )---
--&gt; State of referenced array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=0; $v=v.0
     iteration 3:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}



Shift elements off start of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of referenced array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=v.1
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of referenced array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=v.1
     iteration 2:  $k=0; $v=v.2
--&gt; State of array after loop:
array(0) {
}

---( Array with 4 element(s): )---
--&gt; State of referenced array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=v.1
     iteration 2:  $k=0; $v=v.2
     iteration 3:  $k=0; $v=v.3
--&gt; State of array after loop:
array(0) {
}



Remove current element of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(0) {
}

---( Array with 2 element(s): )---
--&gt; State of referenced array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
--&gt; State of array after loop:
array(0) {
}

---( Array with 3 element(s): )---
--&gt; State of referenced array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
--&gt; State of array after loop:
array(0) {
}

---( Array with 4 element(s): )---
--&gt; State of referenced array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
--&gt; State of array after loop:
array(0) {
}



Adding elements to the end of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(5) "new.0"
}

---( Array with 2 element(s): )---
--&gt; State of referenced array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=new.0
     iteration 3:  $k=3; $v=new.1
     iteration 4:  $k=4; $v=new.2
     iteration 5:  $k=5; $v=new.3
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(8) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(5) "new.0"
  [3]=&gt;
  string(5) "new.1"
  [4]=&gt;
  string(5) "new.2"
  [5]=&gt;
  string(5) "new.3"
  [6]=&gt;
  string(5) "new.4"
  [7]=&gt;
  string(5) "new.5"
}

---( Array with 3 element(s): )---
--&gt; State of referenced array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=new.0
     iteration 4:  $k=4; $v=new.1
     iteration 5:  $k=5; $v=new.2
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(9) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(5) "new.0"
  [4]=&gt;
  string(5) "new.1"
  [5]=&gt;
  string(5) "new.2"
  [6]=&gt;
  string(5) "new.3"
  [7]=&gt;
  string(5) "new.4"
  [8]=&gt;
  string(5) "new.5"
}

---( Array with 4 element(s): )---
--&gt; State of referenced array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=1; $v=v.1
     iteration 2:  $k=2; $v=v.2
     iteration 3:  $k=3; $v=v.3
     iteration 4:  $k=4; $v=new.0
     iteration 5:  $k=5; $v=new.1
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(10) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
  [4]=&gt;
  string(5) "new.0"
  [5]=&gt;
  string(5) "new.1"
  [6]=&gt;
  string(5) "new.2"
  [7]=&gt;
  string(5) "new.3"
  [8]=&gt;
  string(5) "new.4"
  [9]=&gt;
  string(5) "new.5"
}



Adding elements to the start of a referenced array
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
--&gt; State of array after loop:
array(2) {
  [0]=&gt;
  string(5) "new.0"
  [1]=&gt;
  string(3) "v.0"
}

---( Array with 2 element(s): )---
--&gt; State of referenced array before loop:
array(2) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=new.0
     iteration 2:  $k=0; $v=new.1
     iteration 3:  $k=0; $v=new.2
     iteration 4:  $k=0; $v=new.3
     iteration 5:  $k=0; $v=new.4
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(8) {
  [0]=&gt;
  string(5) "new.5"
  [1]=&gt;
  string(5) "new.4"
  [2]=&gt;
  string(5) "new.3"
  [3]=&gt;
  string(5) "new.2"
  [4]=&gt;
  string(5) "new.1"
  [5]=&gt;
  string(5) "new.0"
  [6]=&gt;
  string(3) "v.0"
  [7]=&gt;
  string(3) "v.1"
}

---( Array with 3 element(s): )---
--&gt; State of referenced array before loop:
array(3) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=new.0
     iteration 2:  $k=0; $v=new.1
     iteration 3:  $k=0; $v=new.2
     iteration 4:  $k=0; $v=new.3
     iteration 5:  $k=0; $v=new.4
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(9) {
  [0]=&gt;
  string(5) "new.5"
  [1]=&gt;
  string(5) "new.4"
  [2]=&gt;
  string(5) "new.3"
  [3]=&gt;
  string(5) "new.2"
  [4]=&gt;
  string(5) "new.1"
  [5]=&gt;
  string(5) "new.0"
  [6]=&gt;
  string(3) "v.0"
  [7]=&gt;
  string(3) "v.1"
  [8]=&gt;
  string(3) "v.2"
}

---( Array with 4 element(s): )---
--&gt; State of referenced array before loop:
array(4) {
  [0]=&gt;
  string(3) "v.0"
  [1]=&gt;
  string(3) "v.1"
  [2]=&gt;
  string(3) "v.2"
  [3]=&gt;
  string(3) "v.3"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
     iteration 1:  $k=0; $v=new.0
     iteration 2:  $k=0; $v=new.1
     iteration 3:  $k=0; $v=new.2
     iteration 4:  $k=0; $v=new.3
     iteration 5:  $k=0; $v=new.4
  ** Stuck in a loop! **
--&gt; State of array after loop:
array(10) {
  [0]=&gt;
  string(5) "new.5"
  [1]=&gt;
  string(5) "new.4"
  [2]=&gt;
  string(5) "new.3"
  [3]=&gt;
  string(5) "new.2"
  [4]=&gt;
  string(5) "new.1"
  [5]=&gt;
  string(5) "new.0"
  [6]=&gt;
  string(3) "v.0"
  [7]=&gt;
  string(3) "v.1"
  [8]=&gt;
  string(3) "v.2"
  [9]=&gt;
  string(3) "v.3"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.016.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'error_reporting' not defined!</result><expected>$a
array(1) {
  [0]=&gt;
  string(8) "original"
}

${'a'}
array(1) {
  [0]=&gt;
  string(8) "original"
}

$$a
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a[0]
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a[0][0]
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a-&gt;b

Warning: Creating default object from empty value in %s on line %d
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a-&gt;b-&gt;c

Warning: Creating default object from empty value in %s on line %d
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a-&gt;b[0]
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a-&gt;b[0][0]
array(1) {
  [0]=&gt;
  string(8) "original"
}

$a-&gt;b[0]-&gt;c

Warning: Creating default object from empty value in %s on line %d
array(1) {
  [0]=&gt;
  string(8) "original"
}

C::$a
array(1) {
  [0]=&gt;
  string(8) "original"
}

C::$a[0]
array(1) {
  [0]=&gt;
  string(8) "original"
}

C::$a[0]-&gt;b

Warning: Creating default object from empty value in %s on line %d
array(1) {
  [0]=&gt;
  string(8) "original"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.017.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'HexaChar</result><expected>10
Done</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIterator.001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>object(MealIterator)#%d (2) {
  ["pos":"MealIterator":private]=&gt;
  int(0)
  ["myContent":"MealIterator":private]=&gt;
  array(3) {
    [0]=&gt;
    string(9) "breakfast"
    [1]=&gt;
    string(5) "lunch"
    [2]=&gt;
    string(6) "dinner"
  }
}
-----( Simple iteration: )-----
--&gt; MealIterator::rewind (0)
--&gt; MealIterator::valid (0)
--&gt; MealIterator::current (0)
--&gt; MealIterator::key (0)
meal 0 =&gt; breakfast
--&gt; MealIterator::next (0)
--&gt; MealIterator::valid (1)
--&gt; MealIterator::current (1)
--&gt; MealIterator::key (1)
meal 1 =&gt; lunch
--&gt; MealIterator::next (1)
--&gt; MealIterator::valid (2)
--&gt; MealIterator::current (2)
--&gt; MealIterator::key (2)
meal 2 =&gt; dinner
--&gt; MealIterator::next (2)
--&gt; MealIterator::valid (3)
--&gt; MealIterator::rewind (3)



-----( Nested iteration: )-----
 --&gt; MealIterator::rewind (0)
 --&gt; MealIterator::valid (0)
 --&gt; MealIterator::current (0)
 --&gt; MealIterator::key (0)

Top level 1: 
meal 0 =&gt; breakfast
     --&gt; MealIterator::rewind (0)
     --&gt; MealIterator::valid (0)
     --&gt; MealIterator::current (0)
     --&gt; MealIterator::key (0)
     meal 0 =&gt; breakfast
     --&gt; MealIterator::next (0)
     --&gt; MealIterator::valid (1)
     --&gt; MealIterator::current (1)
     --&gt; MealIterator::key (1)
     meal 1 =&gt; lunch
     --&gt; MealIterator::next (1)
     --&gt; MealIterator::valid (2)
     --&gt; MealIterator::current (2)
     --&gt; MealIterator::key (2)
     meal 2 =&gt; dinner
     --&gt; MealIterator::next (2)
     --&gt; MealIterator::valid (3)
 --&gt; MealIterator::next (3)

Notice: Undefined offset: 3 in %s on line %d
 --&gt; MealIterator::valid (4)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIterator.002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>-----( Try to iterate with &amp;$value: )-----

Fatal error: An iterator cannot be used with foreach by reference in %s on line 13</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIteratorAggregate.001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>object(EuropeanMeals)#%d (2) {
  ["storedEnglishMealIterator":"EuropeanMeals":private]=&gt;
  object(EnglishMealIterator)#%d (2) {
    ["pos":"EnglishMealIterator":private]=&gt;
    int(0)
    ["myContent":"EnglishMealIterator":private]=&gt;
    array(3) {
      [0]=&gt;
      string(9) "breakfast"
      [1]=&gt;
      string(6) "dinner"
      [2]=&gt;
      string(3) "tea"
    }
  }
  ["storedFrenchMealIterator":"EuropeanMeals":private]=&gt;
  object(FrenchMealIterator)#%d (2) {
    ["pos":"FrenchMealIterator":private]=&gt;
    int(0)
    ["myContent":"FrenchMealIterator":private]=&gt;
    array(4) {
      [0]=&gt;
      string(14) "petit dejeuner"
      [1]=&gt;
      string(8) "dejeuner"
      [2]=&gt;
      string(6) "gouter"
      [3]=&gt;
      string(6) "dinner"
    }
  }
}
-----( Simple iteration 1: )-----
--&gt; EuropeanMeals::getIterator
--&gt; EnglishMealIterator::rewind (0)
--&gt; EnglishMealIterator::valid (0)
--&gt; EnglishMealIterator::current (0)
--&gt; EnglishMealIterator::key (0)
meal 0 =&gt; breakfast
--&gt; EnglishMealIterator::next (0)
--&gt; EnglishMealIterator::valid (1)
--&gt; EnglishMealIterator::current (1)
--&gt; EnglishMealIterator::key (1)
meal 1 =&gt; dinner
--&gt; EnglishMealIterator::next (1)
--&gt; EnglishMealIterator::valid (2)
--&gt; EnglishMealIterator::current (2)
--&gt; EnglishMealIterator::key (2)
meal 2 =&gt; tea
--&gt; EnglishMealIterator::next (2)
--&gt; EnglishMealIterator::valid (3)
-----( Simple iteration 2: )-----
--&gt; EuropeanMeals::getIterator
--&gt; FrenchMealIterator::rewind (0)
--&gt; FrenchMealIterator::valid (0)
--&gt; FrenchMealIterator::current (0)
--&gt; FrenchMealIterator::key (0)
meal 0 =&gt; petit dejeuner
--&gt; FrenchMealIterator::next (0)
--&gt; FrenchMealIterator::valid (1)
--&gt; FrenchMealIterator::current (1)
--&gt; FrenchMealIterator::key (1)
meal 1 =&gt; dejeuner
--&gt; FrenchMealIterator::next (1)
--&gt; FrenchMealIterator::valid (2)
--&gt; FrenchMealIterator::current (2)
--&gt; FrenchMealIterator::key (2)
meal 2 =&gt; gouter
--&gt; FrenchMealIterator::next (2)
--&gt; FrenchMealIterator::valid (3)
--&gt; FrenchMealIterator::current (3)
--&gt; FrenchMealIterator::key (3)
meal 3 =&gt; dinner
--&gt; FrenchMealIterator::next (3)
--&gt; FrenchMealIterator::valid (4)



-----( Nested iteration: )-----
 --&gt; EuropeanMeals::getIterator
 --&gt; EnglishMealIterator::rewind (3)
 --&gt; EnglishMealIterator::valid (0)
 --&gt; EnglishMealIterator::current (0)
 --&gt; EnglishMealIterator::key (0)

Top level 1: 
meal 0 =&gt; breakfast
     --&gt; EuropeanMeals::getIterator
     --&gt; FrenchMealIterator::rewind (4)
     --&gt; FrenchMealIterator::valid (0)
     --&gt; FrenchMealIterator::current (0)
     --&gt; FrenchMealIterator::key (0)
     meal 0 =&gt; petit dejeuner
     --&gt; FrenchMealIterator::next (0)
     --&gt; FrenchMealIterator::valid (1)
     --&gt; FrenchMealIterator::current (1)
     --&gt; FrenchMealIterator::key (1)
     meal 1 =&gt; dejeuner
     --&gt; FrenchMealIterator::next (1)
     --&gt; FrenchMealIterator::valid (2)
     --&gt; FrenchMealIterator::current (2)
     --&gt; FrenchMealIterator::key (2)
     meal 2 =&gt; gouter
     --&gt; FrenchMealIterator::next (2)
     --&gt; FrenchMealIterator::valid (3)
     --&gt; FrenchMealIterator::current (3)
     --&gt; FrenchMealIterator::key (3)
     meal 3 =&gt; dinner
     --&gt; FrenchMealIterator::next (3)
     --&gt; FrenchMealIterator::valid (4)
 --&gt; EnglishMealIterator::next (0)
 --&gt; EnglishMealIterator::valid (1)
 --&gt; EnglishMealIterator::current (1)
 --&gt; EnglishMealIterator::key (1)

Top level 2: 
meal 1 =&gt; dinner
     --&gt; EuropeanMeals::getIterator
     --&gt; EnglishMealIterator::rewind (1)
     --&gt; EnglishMealIterator::valid (0)
     --&gt; EnglishMealIterator::current (0)
     --&gt; EnglishMealIterator::key (0)
     meal 0 =&gt; breakfast
     --&gt; EnglishMealIterator::next (0)
     --&gt; EnglishMealIterator::valid (1)
     --&gt; EnglishMealIterator::current (1)
     --&gt; EnglishMealIterator::key (1)
     meal 1 =&gt; dinner
     --&gt; EnglishMealIterator::next (1)
     --&gt; EnglishMealIterator::valid (2)
     --&gt; EnglishMealIterator::current (2)
     --&gt; EnglishMealIterator::key (2)
     meal 2 =&gt; tea
     --&gt; EnglishMealIterator::next (2)
     --&gt; EnglishMealIterator::valid (3)
 --&gt; EnglishMealIterator::next (3)
 --&gt; EnglishMealIterator::valid (4)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIteratorAggregate.002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>30: Objects returned by bad1::getIterator() must be traversable or implement interface Iterator
30: Objects returned by bad2::getIterator() must be traversable or implement interface Iterator
30: Objects returned by bad3::getIterator() must be traversable or implement interface Iterator
30: Objects returned by bad4::getIterator() must be traversable or implement interface Iterator
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIteratorAggregate.003.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>-----( A1: )-----
--&gt; EnglishMealIterator::rewind (0)
--&gt; EnglishMealIterator::valid (0)
--&gt; EnglishMealIterator::current (0)
--&gt; EnglishMealIterator::key (0)
meal 0 =&gt; breakfast
--&gt; EnglishMealIterator::next (0)
--&gt; EnglishMealIterator::valid (1)
--&gt; EnglishMealIterator::current (1)
--&gt; EnglishMealIterator::key (1)
meal 1 =&gt; dinner
--&gt; EnglishMealIterator::next (1)
--&gt; EnglishMealIterator::valid (2)
--&gt; EnglishMealIterator::current (2)
--&gt; EnglishMealIterator::key (2)
meal 2 =&gt; tea
--&gt; EnglishMealIterator::next (2)
--&gt; EnglishMealIterator::valid (3)

-----( A2: )-----
--&gt; EnglishMealIterator::rewind (0)
--&gt; EnglishMealIterator::valid (0)
--&gt; EnglishMealIterator::current (0)
--&gt; EnglishMealIterator::key (0)
meal 0 =&gt; breakfast
--&gt; EnglishMealIterator::next (0)
--&gt; EnglishMealIterator::valid (1)
--&gt; EnglishMealIterator::current (1)
--&gt; EnglishMealIterator::key (1)
meal 1 =&gt; dinner
--&gt; EnglishMealIterator::next (1)
--&gt; EnglishMealIterator::valid (2)
--&gt; EnglishMealIterator::current (2)
--&gt; EnglishMealIterator::key (2)
meal 2 =&gt; tea
--&gt; EnglishMealIterator::next (2)
--&gt; EnglishMealIterator::valid (3)

-----( A3: )-----
--&gt; EnglishMealIterator::rewind (0)
--&gt; EnglishMealIterator::valid (0)
--&gt; EnglishMealIterator::current (0)
--&gt; EnglishMealIterator::key (0)
meal 0 =&gt; breakfast
--&gt; EnglishMealIterator::next (0)
--&gt; EnglishMealIterator::valid (1)
--&gt; EnglishMealIterator::current (1)
--&gt; EnglishMealIterator::key (1)
meal 1 =&gt; dinner
--&gt; EnglishMealIterator::next (1)
--&gt; EnglishMealIterator::valid (2)
--&gt; EnglishMealIterator::current (2)
--&gt; EnglishMealIterator::key (2)
meal 2 =&gt; tea
--&gt; EnglishMealIterator::next (2)
--&gt; EnglishMealIterator::valid (3)
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopIteratorAggregate.004.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: Interfaces not supported!</result><expected>c::getIterator
c_iter::__construct
c_iter::rewind
c_iter::valid = true
c_iter::current
c_iter::key
c::getIterator
c_iter::__construct
c_iter::rewind
c_iter::valid = true
c_iter::current
double:0:0
c_iter::next
c_iter::valid = true
c_iter::current
c_iter::key
c::getIterator
c_iter::__construct
c_iter::rewind
c_iter::valid = true
c_iter::current
double:1:0
c_iter::next
c_iter::valid = true
c_iter::current
c_iter::key
c::getIterator
c_iter::__construct
c_iter::rewind
c_iter::valid = true
c_iter::current
double:2:0
c_iter::next
c_iter::valid = false
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg.001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_arg' not defined!</result><expected>2</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg.002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_arg' not defined!</result><expected>int(3)
int(3)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg.003.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_arg' not defined!</result><expected>Warning: func_get_arg():  Called from the global scope - no function context in %s on line %d
bool(false)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg.004.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_arg' not defined!</result><expected>Warning: func_get_arg():  Argument 2 not passed to function in %s on line %d
bool(false)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg.005.phpt</fileName><outcome>not_supported</outcome><result>string(10) "original.a"
Unsupported feature: 'func_get_arg' not defined!</result><expected>string(10) "original.a"
string(10) "original.a"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_arg_variation.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_arg' not defined!</result><expected>Warning: func_get_arg() expects exactly 1 parameter, 0 given in %s on line %d

Warning: func_get_arg() expects exactly 1 parameter, 2 given in %s on line %d

Warning: func_get_arg() expects parameter 1 to be long, string given in %s on line %d

Warning: func_get_arg():  The argument number should be &gt;= 0 in %s on line %d

Warning: func_get_arg():  Argument 2 not passed to function in %s on line %d</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_args.001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_args' not defined!</result><expected>array(0) {
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_args.002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_args' not defined!</result><expected>array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_args.003.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_get_args' not defined!</result><expected>Warning\: func_get_args\(\)\:  Called from the global scope - no function context in \S* on line 3
bool\(false\)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_get_args.004.phpt</fileName><outcome>not_supported</outcome><result>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
Unsupported feature: 'func_get_args' not defined!</result><expected>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
array(2) {
  [0]=&gt;
  string(10) "original.a"
  [1]=&gt;
  string(10) "original.a"
}
array(2) {
  [0]=&gt;
  string(10) "original.a"
  [1]=&gt;
  string(9) "changed.y"
}
string(9) "changed.y"


-- Ref, Val --
string(10) "original.b"
string(10) "original.b"
array(2) {
  [0]=&gt;
  string(10) "original.b"
  [1]=&gt;
  string(10) "original.b"
}
array(2) {
  [0]=&gt;
  string(9) "changed.x"
  [1]=&gt;
  string(10) "original.b"
}
string(9) "changed.x"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_num_args.001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_num_args' not defined!</result><expected>int(0)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_num_args.002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_num_args' not defined!</result><expected>int(3)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_num_args.003.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: 'func_num_args' not defined!</result><expected>Warning: func_num_args():  Called from the global scope - no function context in %s on line %d
int(-1)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//func_num_args.004.phpt</fileName><outcome>not_supported</outcome><result>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
Unsupported feature: 'func_num_args' not defined!</result><expected>-- Val, Ref --
string(10) "original.a"
string(10) "original.a"
int(2)
int(2)
string(9) "changed.y"


-- Ref, Val --
string(10) "original.b"
string(10) "original.b"
int(2)
int(2)
string(9) "changed.x"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//include_variation1.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>Included!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//include_variation2.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'RequireOnce not supported</result><expected>Included!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//include_variation3.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'RequireOnce not supported</result><expected>Included!</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//static_variation_001.phpt</fileName><outcome>not_supported</outcome><result>array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}
array(3) {
  [0]=&gt;
  int(4)
  [1]=&gt;
  int(5)
  [2]=&gt;
  int(6)
}
array(3) {
  [0]=&gt;
  int(7)
  [1]=&gt;
  int(8)
  [2]=&gt;
  int(9)
}
Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}
array(3) {
  [0]=&gt;
  int(4)
  [1]=&gt;
  int(5)
  [2]=&gt;
  int(6)
}
array(3) {
  [0]=&gt;
  int(7)
  [1]=&gt;
  int(8)
  [2]=&gt;
  int(9)
}
array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}
array(3) {
  [0]=&gt;
  int(4)
  [1]=&gt;
  int(5)
  [2]=&gt;
  int(6)
}
array(3) {
  [0]=&gt;
  int(7)
  [1]=&gt;
  int(8)
  [2]=&gt;
  int(9)
}
array(3) {
  [0]=&gt;
  int(10)
  [1]=&gt;
  int(11)
  [2]=&gt;
  int(12)
}
array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//static_variation_002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}
array(3) {
  [0]=&gt;
  int(4)
  [1]=&gt;
  int(5)
  [2]=&gt;
  int(6)
}
array(3) {
  [0]=&gt;
  int(7)
  [1]=&gt;
  int(8)
  [2]=&gt;
  int(9)
}
array(3) {
  [0]=&gt;
  int(10)
  [1]=&gt;
  int(11)
  [2]=&gt;
  int(12)
}
array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}
array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(3)
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//throw_variation_001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: KPHP ERROR: 'Include not supported</result><expected>caught exception</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//type_hints_001.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: Type hints</result><expected>Catchable fatal error: Argument 1 passed to type_hint_foo() must be an instance of Foo, instance of Bar given, called in %s on line 16 and defined in %s on line 9</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//type_hints_002.phpt</fileName><outcome>not_supported</outcome><result>Unsupported feature: Type Hints</result><expected>object(P)#2 (0) {
}
-
NULL
-
NULL
-</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test></not-supported><manual-review><test><fileName>tests/zend/lang//bug21600.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Warning: Only variables should be assigned by reference in %s on line %d
array(1) {
  ["foo"]=&gt;
  string(4) "test"
}

Warning: Only variables should be assigned by reference in %s on line %d
array(1) {
  ["foo"]=&gt;
  string(4) "test"
}</result><expected>Strict Standards: Only variables should be assigned by reference in %sbug21600.php on line 4
array(1) {
  ["foo"]=&gt;
  string(4) "test"
}

Strict Standards: Only variables should be assigned by reference in %sbug21600.php on line 11
array(1) {
  ["foo"]=&gt;
  string(4) "test"
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug24908.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Notice: Undefined variable: %s in %s on line %d</result><expected>OK</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug26866.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Notice: Undefined property: %s in %s on line %d</result><expected>Exception raised!</expected><k>&lt;k&gt;
            'FunctionCall(locNull,, &amp;quot;get_name&amp;quot;,, 'ListWrap(.KList)) ~&amp;gt; 'Echo(
              'ListWrap(HOLE)) ~&amp;gt; 'ListWrap(.KList) ~&amp;gt; popx ~&amp;gt; 'Echo('ListWrap
              ('Literal(&amp;quot;\n&amp;quot;)))
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug27439.phpt</fileName><outcome>output_needs_manual_review</outcome><result>123
Notice: Undefined property: %s in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d
123
===DONE===</result><expected>123
Notice: Undefined property: test::$foobar in %s on line %d

Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Invalid argument supplied for foreach() in %s on line %d
123
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//bug29566.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

===DONE===</result><expected>Warning: Illegal string offset 'nosuchkey' in %sbug29566.php on line %d

Warning: Invalid argument supplied for foreach() in %sbug29566.php on line %d
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_002.phpt</fileName><outcome>output_needs_manual_review</outcome><result>A=hello B=bye

Warning: Cannot use a scalar value as an array in %s on line %d</result><expected>A=hello B=bye

Warning: Cannot use a scalar value as an array in %s on line %d
array(2) {
  [0]=&gt;
  int(10)
  [1]=&gt;
  int(10)
}
array(2) {
  [0]=&gt;
  int(30)
  [1]=&gt;
  int(30)
}
array(3) {
  [0]=&gt;
  int(1000)
  [1]=&gt;
  int(2000)
  [2]=&gt;
  int(3000)
}
L=100 M=200 N=300
O= and P=
10 20 40 50 60 70 80

Notice: Undefined offset: 1 in %s on line %d

Notice: Undefined offset: 0 in %s on line %d
Y=,Z=

Notice: Undefined offset: 1 in %s on line %d
AA=10
CC=10 DD=30
Array
(
    [0] =&gt; array created in f()
    [array entry created after f()] =&gt; Array
        (
            [1] =&gt; hello
        )

)</expected><k>&lt;k&gt;
            write ( 1 , locNull ) ~&amp;gt; 1 ~&amp;gt; 'Expr(HOLE) ~&amp;gt; 'Expr('Assign(
              'Variable('Simple(&amp;quot;d&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList)
              ,, 'Value('LNumber('Deci(&amp;quot;0&amp;quot;)))),, 'Pair('None(.KList),, 'Value(
              'LNumber('Deci(&amp;quot;10&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(
              &amp;quot;i&amp;quot;)),, 'LNumber('Deci(&amp;quot;0&amp;quot;)))) ~&amp;gt; 'Expr('Assign('ArrayAccess(
              'Variable('Simple(&amp;quot;d&amp;quot;)),, 'Some('PostInc('Variable('Simple(&amp;quot;i&amp;quot;))
              ))),, 'Mul('Variable('Simple(&amp;quot;i&amp;quot;)),, 'LNumber('Deci(&amp;quot;10&amp;quot;)))))
               ~&amp;gt; 'Expr('FunctionCall('FunctionName(&amp;quot;var_dump&amp;quot;),, 'ListWrap(
              'Param('Variable('Simple(&amp;quot;d&amp;quot;)))))) ~&amp;gt; 'Expr('Assign('Variable(
              'Simple(&amp;quot;e&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value(
              'LNumber('Deci(&amp;quot;0&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber(
              'Deci(&amp;quot;0&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;f&amp;quot;)),, 
              'LNumber('Deci(&amp;quot;0&amp;quot;)))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;g1&amp;quot;))
              ,, 'Array('ListWrap('Pair('None(.KList),, 'Value('LNumber('Deci(
              &amp;quot;10&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;10&amp;quot;)))))
              ))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;g2&amp;quot;)),, 'Array('ListWrap
              ('Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;20&amp;quot;)))),, 'Pair(
              'None(.KList),, 'Value('LNumber('Deci(&amp;quot;20&amp;quot;)))))))) ~&amp;gt; 'Expr(
              'Assign('Variable('Simple(&amp;quot;g3&amp;quot;)),, 'Array('ListWrap('Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;30&amp;quot;)))),, 'Pair('None(.KList)
              ,, 'Value('LNumber('Deci(&amp;quot;30&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable
              ('Simple(&amp;quot;g&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value(
              'Variable('Simple(&amp;quot;g1&amp;quot;)))),, 'Pair('None(.KList),, 'Value(
              'Variable('Simple(&amp;quot;g2&amp;quot;)))),, 'Pair('None(.KList),, 'Value(
              'Variable('Simple(&amp;quot;g3&amp;quot;)))))))) ~&amp;gt; 'Expr('ListAssign('List(
              'ListWrap('Some('ArrayAccess('Variable('Simple(&amp;quot;e&amp;quot;)),, 'Some(
              'PostInc('Variable('Simple(&amp;quot;f&amp;quot;)))))),, 'Some('ArrayAccess(
              'Variable('Simple(&amp;quot;e&amp;quot;)),, 'Some('PostInc('Variable('Simple(&amp;quot;f&amp;quot;))
              )))))),, 'ArrayAccess('Variable('Simple(&amp;quot;g&amp;quot;)),, 'Some('Variable(
              'Simple(&amp;quot;f&amp;quot;)))))) ~&amp;gt; 'Expr('FunctionCall('FunctionName(
              &amp;quot;var_dump&amp;quot;),, 'ListWrap('Param('Variable('Simple(&amp;quot;e&amp;quot;)))))) ~&amp;gt; 
              'Expr('Assign('Variable('Simple(&amp;quot;i1&amp;quot;)),, 'Array('ListWrap('Pair(
              'None(.KList),, 'Value('LNumber('Deci(&amp;quot;1&amp;quot;)))),, 'Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;2&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign(
              'Variable('Simple(&amp;quot;i2&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList)
              ,, 'Value('LNumber('Deci(&amp;quot;10&amp;quot;)))),, 'Pair('None(.KList),, 'Value
              ('LNumber('Deci(&amp;quot;20&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(
              &amp;quot;i3&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value('LNumber(
              'Deci(&amp;quot;100&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber('Deci(
              &amp;quot;200&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;i4&amp;quot;)),, 'Array
              ('ListWrap('Pair('None(.KList),, 'Value('Array('ListWrap('Pair(
              'None(.KList),, 'Value('LNumber('Deci(&amp;quot;1000&amp;quot;)))),, 'Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;2000&amp;quot;)))))))),, 'Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;3000&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign(
              'Variable('Simple(&amp;quot;i&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList)
              ,, 'Value('Variable('Simple(&amp;quot;i1&amp;quot;)))),, 'Pair('None(.KList),, 
              'Value('Variable('Simple(&amp;quot;i2&amp;quot;)))),, 'Pair('None(.KList),, 'Value
              ('Variable('Simple(&amp;quot;i3&amp;quot;)))),, 'Pair('None(.KList),, 'Value(
              'Variable('Simple(&amp;quot;i4&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable(
              'Simple(&amp;quot;j&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value(
              'LNumber('Deci(&amp;quot;0&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber(
              'Deci(&amp;quot;0&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;0&amp;quot;)
              ))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;h&amp;quot;)),, 'LNumber(
              'Deci(&amp;quot;0&amp;quot;)))) ~&amp;gt; 'Expr('ListAssign('List('ListWrap('Some('List(
              'ListWrap('Some('ArrayAccess('Variable('Simple(&amp;quot;j&amp;quot;)),, 'Some(
              'PostInc('Variable('Simple(&amp;quot;h&amp;quot;)))))),, 'Some('ArrayAccess(
              'Variable('Simple(&amp;quot;j&amp;quot;)),, 'Some('PostInc('Variable('Simple(&amp;quot;h&amp;quot;))
              ))))))),, 'Some('ArrayAccess('Variable('Simple(&amp;quot;j&amp;quot;)),, 'Some(
              'PostInc('Variable('Simple(&amp;quot;h&amp;quot;)))))))),, 'ArrayAccess('Variable(
              'Simple(&amp;quot;i&amp;quot;)),, 'Some('Variable('Simple(&amp;quot;h&amp;quot;)))))) ~&amp;gt; 'Expr(
              'FunctionCall('FunctionName(&amp;quot;var_dump&amp;quot;),, 'ListWrap('Param(
              'Variable('Simple(&amp;quot;j&amp;quot;)))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(
              &amp;quot;k3&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value('LNumber(
              'Deci(&amp;quot;100&amp;quot;)))),, 'Pair('None(.KList),, 'Value('LNumber('Deci(
              &amp;quot;200&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;k&amp;quot;)),, 'Array(
              'ListWrap('Pair('None(.KList),, 'Value('Variable('Simple(&amp;quot;k3&amp;quot;)))
              ),, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;300&amp;quot;))))))))
               ~&amp;gt; 'Expr('ListAssign('List('ListWrap('Some('List('ListWrap(
              'Some('Variable('Simple(&amp;quot;l&amp;quot;))),, 'Some('Variable('Simple(&amp;quot;m&amp;quot;))))
              )),, 'Some('Variable('Simple(&amp;quot;n&amp;quot;))))),, 'Variable('Simple(&amp;quot;k&amp;quot;)))
              ) ~&amp;gt; 'Echo('ListWrap('ConstantEncapsedString('DoubleQuoted(
              'DQContent('Some('Literal(&amp;quot;L=&amp;quot;)),, 'DQContent('DQContent(
              'DQContent('Variable('Simple(&amp;quot;l&amp;quot;)),, 'Some('Literal(&amp;quot; M=&amp;quot;)),, 
              'Variable('Simple(&amp;quot;m&amp;quot;))),, 'Some('Literal(&amp;quot; N=&amp;quot;)),, 'Variable(
              'Simple(&amp;quot;n&amp;quot;))),, 'None(.KList),, 'Escape(110)),, 'None(.KList)))
              ))) ~&amp;gt; 'Expr('ListAssign('List('ListWrap('Some('Variable('Simple
              (&amp;quot;o&amp;quot;))),, 'Some('Variable('Simple(&amp;quot;p&amp;quot;))))),, 'LNumber('Deci(&amp;quot;20&amp;quot;
              )))) ~&amp;gt; 'Echo('ListWrap('ConstantEncapsedString('DoubleQuoted(
              'DQContent('Some('Literal(&amp;quot;O=&amp;quot;)),, 'DQContent('DQContent(
              'Variable('Simple(&amp;quot;o&amp;quot;)),, 'Some('Literal(&amp;quot; and P=&amp;quot;)),, 'Variable
              ('Simple(&amp;quot;p&amp;quot;))),, 'None(.KList),, 'Escape(110)),, 'None(.KList))
              )))) ~&amp;gt; 'Expr('Assign('Variable('Simple(&amp;quot;q1&amp;quot;)),, 'Array(
              'ListWrap('Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;10&amp;quot;))))
              ,, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;20&amp;quot;)))),, 'Pair(
              'None(.KList),, 'Value('LNumber('Deci(&amp;quot;30&amp;quot;)))),, 'Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;40&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign(
              'Variable('Simple(&amp;quot;q2&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList)
              ,, 'Value('LNumber('Deci(&amp;quot;50&amp;quot;)))),, 'Pair('None(.KList),, 'Value
              ('LNumber('Deci(&amp;quot;60&amp;quot;)))))))) ~&amp;gt; 'Expr('Assign('Variable('Simple(
              &amp;quot;q3&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value('Variable
              ('Simple(&amp;quot;q1&amp;quot;)))),, 'Pair('None(.KList),, 'Value('Variable(
              'Simple(&amp;quot;q2&amp;quot;)))),, 'Pair('None(.KList),, 'Value('Null(.KList)))
              ,, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;70&amp;quot;)))))))) ~&amp;gt; 
              'Expr('Assign('Variable('Simple(&amp;quot;q4&amp;quot;)),, 'Array('ListWrap('Pair(
              'None(.KList),, 'Value('Variable('Simple(&amp;quot;q3&amp;quot;)))),, 'Pair('None(
              .KList),, 'Value('Null(.KList))),, 'Pair('None(.KList),, 'Value(
              'LNumber('Deci(&amp;quot;80&amp;quot;)))))))) ~&amp;gt; 'Expr('ListAssign('List('ListWrap
              ('Some('List('ListWrap('Some('List('ListWrap('Some('Variable(
              'Simple(&amp;quot;r&amp;quot;))),, 'Some('Variable('Simple(&amp;quot;s&amp;quot;))),, 'None(.KList)
              ,, 'Some('Variable('Simple(&amp;quot;t&amp;quot;)))))),, 'Some('List('ListWrap(
              'Some('Variable('Simple(&amp;quot;u&amp;quot;))),, 'Some('Variable('Simple(&amp;quot;v&amp;quot;))))
              )),, 'None(.KList),, 'Some('Variable('Simple(&amp;quot;w&amp;quot;)))))),, 'None(
              .KList),, 'Some('Variable('Simple(&amp;quot;x&amp;quot;))))),, 'Variable('Simple(
              &amp;quot;q4&amp;quot;)))) ~&amp;gt; 'Echo('ListWrap('ConstantEncapsedString(
              'DoubleQuoted('DQContent('None(.KList),, 'DQContent('DQContent(
              'DQContent('DQContent('DQContent('DQContent('DQContent('Variable
              ('Simple(&amp;quot;r&amp;quot;)),, 'Some('Literal(&amp;quot; &amp;quot;)),, 'Variable('Simple(&amp;quot;s&amp;quot;)))
              ,, 'Some('Literal(&amp;quot; &amp;quot;)),, 'Variable('Simple(&amp;quot;t&amp;quot;))),, 'Some(
              'Literal(&amp;quot; &amp;quot;)),, 'Variable('Simple(&amp;quot;u&amp;quot;))),, 'Some('Literal(&amp;quot; &amp;quot;))
              ,, 'Variable('Simple(&amp;quot;v&amp;quot;))),, 'Some('Literal(&amp;quot; &amp;quot;)),, 'Variable(
              'Simple(&amp;quot;w&amp;quot;))),, 'Some('Literal(&amp;quot; &amp;quot;)),, 'Variable('Simple(&amp;quot;x&amp;quot;)))
              ,, 'None(.KList),, 'Escape(110)),, 'None(.KList)))))) ~&amp;gt; 'Expr(
              'ListAssign('List('ListWrap('Some('Variable('Simple(&amp;quot;y&amp;quot;))),, 
              'Some('Variable('Simple(&amp;quot;z&amp;quot;))))),, 'Array('ListWrap(.KList))))
               ~&amp;gt; 'Echo('ListWrap('ConstantEncapsedString('DoubleQuoted(
              'DQContent('Some('Literal(&amp;quot;Y=&amp;quot;)),, 'DQContent('DQContent(
              'Variable('Simple(&amp;quot;y&amp;quot;)),, 'Some('Literal(&amp;quot;,Z=&amp;quot;)),, 'Variable(
              'Simple(&amp;quot;z&amp;quot;))),, 'None(.KList),, 'Escape(110)),, 'None(.KList)))
              ))) ~&amp;gt; 'Expr('ListAssign('List('ListWrap('Some('Variable('Simple
              (&amp;quot;aa&amp;quot;))),, 'Some('Variable('Simple(&amp;quot;bb&amp;quot;))))),, 'Array('ListWrap(
              'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;10&amp;quot;)))))))) ~&amp;gt; 
              'Echo('ListWrap('ConstantEncapsedString('DoubleQuoted('DQContent
              ('Some('Literal(&amp;quot;AA=&amp;quot;)),, 'DQContent('Variable('Simple(&amp;quot;aa&amp;quot;)),, 
              'None(.KList),, 'Escape(110)),, 'None(.KList)))))) ~&amp;gt; 'Expr(
              'ListAssign('List('ListWrap('Some('Variable('Simple(&amp;quot;cc&amp;quot;))),, 
              'None(.KList),, 'Some('Variable('Simple(&amp;quot;dd&amp;quot;))))),, 'Array(
              'ListWrap('Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;10&amp;quot;))))
              ,, 'Pair('None(.KList),, 'Value('LNumber('Deci(&amp;quot;20&amp;quot;)))),, 'Pair(
              'None(.KList),, 'Value('LNumber('Deci(&amp;quot;30&amp;quot;)))),, 'Pair('None(
              .KList),, 'Value('LNumber('Deci(&amp;quot;40&amp;quot;)))))))) ~&amp;gt; 'Echo('ListWrap(
              'ConstantEncapsedString('DoubleQuoted('DQContent('Some('Literal(
              &amp;quot;CC=&amp;quot;)),, 'DQContent('DQContent('Variable('Simple(&amp;quot;cc&amp;quot;)),, 'Some
              ('Literal(&amp;quot; DD=&amp;quot;)),, 'Variable('Simple(&amp;quot;dd&amp;quot;))),, 'None(.KList)
              ,, 'Escape(110)),, 'None(.KList)))))) ~&amp;gt; 'Expr('Assign('Variable
              ('Simple(&amp;quot;ee&amp;quot;)),, 'Array('ListWrap('Pair('None(.KList),, 'Value(
              'ConstantEncapsedString('DoubleQuoted('DQContent('Some('Literal(
              &amp;quot;original array&amp;quot;))))))))))) ~&amp;gt; 'Expr('Assign('ArrayAccess(
              'ArrayAccess('Variable('Simple(&amp;quot;ee&amp;quot;)),, 'Some(
              'ConstantEncapsedString('DoubleQuoted('DQContent('Some('Literal(
              &amp;quot;array entry created after f()&amp;quot;))))))),, 'Some('FunctionCall(
              'FunctionName(&amp;quot;f&amp;quot;),, 'ListWrap(.KList)))),, 
              'ConstantEncapsedString('DoubleQuoted('DQContent('Some('Literal(
              &amp;quot;hello&amp;quot;))))))) ~&amp;gt; 'Expr('FunctionCall('FunctionName(&amp;quot;print_r&amp;quot;)
              ,, 'ListWrap('Param('Variable('Simple(&amp;quot;ee&amp;quot;)))))) ~&amp;gt; 'Echo(
              'ListWrap('Literal(&amp;quot;\n&amp;quot;)))
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_007.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d

Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d

Deprecated: Assigning the return value of new by reference is deprecated in %s on line %d
Array
(
  [2]=&gt; Array
        (
      [3]=&gt; stdClass
        )
  [0]=&gt; Array
        (
      [1]=&gt; stdClass Object
                (
                )
        )
)
stdClass Object
(
  ["a"]=&gt; stdClass Object
        (
      ["b"]=&gt; stdClass Object
                (
                )
        )
)</result><expected>Deprecated: Assigning the return value of new by reference is deprecated in %s.php on line 3

Deprecated: Assigning the return value of new by reference is deprecated in %s.php on line 7

Deprecated: Assigning the return value of new by reference is deprecated in %s.php on line 8
Array
(
    [2] =&gt; Array
        (
            [3] =&gt; stdClass
        )

    [0] =&gt; Array
        (
            [1] =&gt; stdClass Object
                (
                )

        )

)
stdClass Object
(
    [a] =&gt; stdClass Object
        (
            [b] =&gt; stdClass Object
                (
                )

        )

)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.003.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Not an array.

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d

Warning: Warning: Invalid argument supplied for foreach() in %s on line %d
done.</result><expected>Not an array.

Warning: Invalid argument supplied for foreach() in %s on line 4

Warning: Invalid argument supplied for foreach() in %s on line 9

Warning: Invalid argument supplied for foreach() in %s on line 14

Warning: Invalid argument supplied for foreach() in %s on line 19

Warning: Invalid argument supplied for foreach() in %s on line 24
done.</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.006.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Fatal error: Key element cannot be a reference in %s on line $d</result><expected>Fatal error: Key element cannot be a reference in %s on line 3</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoop.011.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Change from array to non iterable:
int(1)

Warning: Invalid argument supplied for foreach() in %s on line %d

Change from object to non iterable:
int(1)

Warning: Invalid argument supplied for foreach() in %s on line %d</result><expected>Change from array to non iterable:
int(1)

Warning: Invalid argument supplied for foreach() in %s on line 5

Change from object to non iterable:
int(1)

Warning: Invalid argument supplied for foreach() in %s on line 15</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//foreachLoopObjects.004.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Removing the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"

Notice: Undefined property: %s in %s on line %d
string(10) "Original c"

Notice: Undefined property: %s in %s on line %d
string(10) "Original d"

Notice: Undefined property: %s in %s on line %d
string(10) "Original e"
object(C)#%d (4) {
  ["a"]=&gt;
  string(10) "Original a"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}

===DONE===</result><expected>Removing the current element from an iterated object.
string(10) "Original a"
string(10) "Original b"

Notice: Undefined property: C::$b in %s on line %d
string(10) "Original c"

Notice: Undefined property: C::$b in %s on line %d
string(10) "Original d"

Notice: Undefined property: C::$b in %s on line %d
string(10) "Original e"
object(C)#%d (4) {
  ["a"]=&gt;
  string(10) "Original a"
  ["c"]=&gt;
  string(10) "Original c"
  ["d"]=&gt;
  string(10) "Original d"
  ["e"]=&gt;
  string(10) "Original e"
}
===DONE===</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_002.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Warning: Only variables should be assigned by reference in %s on line %d
int(2)</result><expected>Fatal error: Only variables can be passed by reference in %s on line 8</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_003.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Passing undefined by value

Notice: Undefined variable: %s in %s on line %d

Inside passbyVal call:
NULL

After call

Notice: Undefined variable: %s in %s on line %d
NULL

Passing undefined by reference

Inside passbyRef call:
NULL

After call
array(1) {
  [0]=&gt;
  NULL
}</result><expected>Passing undefined by value

Notice: Undefined variable: undef1 in %s on line 13

Inside passbyVal call:
NULL

After call

Notice: Undefined variable: undef1 in %s on line 15
NULL

Passing undefined by reference

Inside passbyRef call:
NULL

After call
array(1) {
  [0]=&gt;
  NULL
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_004.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Warning: Only variables should be assigned by reference in %s on line %d
int(5)</result><expected>Strict Standards: Only variables should be passed by reference in %s on line 13
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_005.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---- Pass by ref / pass by val: functions ----

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d
NULL
string(12) "Ref1 changed"
string(12) "Ref2 changed"


 ---- Pass by ref / pass by val: static method calls ----

Notice: Non-static method should not be called statically

Notice: Undefined variable: %s in %s on line %d

Notice: Non-static method should not be called statically

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Non-static method should not be called statically

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Non-static method should not be called statically

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Non-static method should not be called statically

Notice: Undefined variable: %s in %s on line %d
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Non-static method should not be called statically
string(12) "Ref1 changed"
string(12) "Ref2 changed"


 ---- Pass by ref / pass by val: instance method calls ----

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Undefined variable: %s in %s on line %d
NULL

Notice: Undefined variable: %s in %s on line %d

Notice: Undefined variable: %s in %s on line %d
NULL
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d
string(11) "Ref changed"

Notice: Undefined variable: %s in %s on line %d
NULL
string(12) "Ref1 changed"
string(12) "Ref2 changed"</result><expected>---- Pass by ref / pass by val: functions ----

Notice: Undefined variable: u1 in %s on line 72

Notice: Undefined variable: u1 in %s on line 74
NULL
string(11) "Ref changed"

Notice: Undefined variable: u1 in %s on line 77

Notice: Undefined variable: u2 in %s on line 77

Notice: Undefined variable: u1 in %s on line 78

Notice: Undefined variable: u2 in %s on line 78
NULL
NULL

Notice: Undefined variable: u1 in %s on line 81

Notice: Undefined variable: u1 in %s on line 82
NULL
string(11) "Ref changed"

Notice: Undefined variable: u2 in %s on line 85

Notice: Undefined variable: u2 in %s on line 86
string(11) "Ref changed"
NULL
string(12) "Ref1 changed"
string(12) "Ref2 changed"


 ---- Pass by ref / pass by val: static method calls ----

Notice: Undefined variable: u1 in %s on line 95

Strict Standards: Non-static method C::v() should not be called statically in %s on line 95

Strict Standards: Non-static method C::r() should not be called statically in %s on line 96

Notice: Undefined variable: u1 in %s on line 97
NULL
string(11) "Ref changed"

Notice: Undefined variable: u1 in %s on line 100

Notice: Undefined variable: u2 in %s on line 100

Strict Standards: Non-static method C::vv() should not be called statically in %s on line 100

Notice: Undefined variable: u1 in %s on line 101

Notice: Undefined variable: u2 in %s on line 101
NULL
NULL

Notice: Undefined variable: u1 in %s on line 104

Strict Standards: Non-static method C::vr() should not be called statically in %s on line 104

Notice: Undefined variable: u1 in %s on line 105
NULL
string(11) "Ref changed"

Notice: Undefined variable: u2 in %s on line 108

Strict Standards: Non-static method C::rv() should not be called statically in %s on line 108

Notice: Undefined variable: u2 in %s on line 109
string(11) "Ref changed"
NULL

Strict Standards: Non-static method C::rr() should not be called statically in %s on line 112
string(12) "Ref1 changed"
string(12) "Ref2 changed"


 ---- Pass by ref / pass by val: instance method calls ----

Notice: Undefined variable: u1 in %s on line 117

Notice: Undefined variable: u1 in %s on line 118
NULL
string(11) "Ref changed"

Notice: Undefined variable: u1 in %s on line 121

Notice: Undefined variable: u1 in %s on line 123
NULL
string(11) "Ref changed"

Notice: Undefined variable: u1 in %s on line 126

Notice: Undefined variable: u2 in %s on line 126

Notice: Undefined variable: u1 in %s on line 127

Notice: Undefined variable: u2 in %s on line 127
NULL
NULL

Notice: Undefined variable: u1 in %s on line 130

Notice: Undefined variable: u1 in %s on line 131
NULL
string(11) "Ref changed"

Notice: Undefined variable: u2 in %s on line 134

Notice: Undefined variable: u2 in %s on line 135
string(11) "Ref changed"
NULL
string(12) "Ref1 changed"
string(12) "Ref2 changed"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_006.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---- Pass uninitialised array &amp; object by ref: function call ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
}
}
}

 ---- Pass uninitialised arrays &amp; objects by ref: static method call ---

Notice: Non-static method should not be called statically
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
}
}
}


---- Pass uninitialised arrays &amp; objects by ref: constructor ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
}
}
}

 ---- Pass uninitialised arrays &amp; objects by ref: instance method call ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
}
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
}
}
}</result><expected>---- Pass uninitialised array &amp; object by ref: function call ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
    }
  }
}

 ---- Pass uninitialised arrays &amp; objects by ref: static method call ---

Strict Standards: Non-static method C::refs() should not be called statically in %s on line 39
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
    }
  }
}


---- Pass uninitialised arrays &amp; objects by ref: constructor ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
    }
  }
}

 ---- Pass uninitialised arrays &amp; objects by ref: instance method call ---
array(1) {
  [0]=&gt;
  string(12) "Ref1 changed"
}
array(1) {
  [0]=&gt;
  array(1) {
    [1]=&gt;
    string(12) "Ref2 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  string(12) "Ref3 changed"
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    string(12) "Ref4 changed"
  }
}
object(stdClass)#%d (1) {
  ["a"]=&gt;
  object(stdClass)#%d (1) {
    ["b"]=&gt;
    object(stdClass)#%d (1) {
      ["c"]=&gt;
      string(12) "Ref5 changed"
    }
  }
}</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_007.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Pass a function call that returns a value:

Warning: Only variables should be assigned by reference in %s on line %d
string(8) "original"
string(8) "original"
Pass a function call that returns a reference:
string(8) "original"
string(7) "changed"

Pass a static method call that returns a value:

Warning: Only variables should be assigned by reference in %s on line %d
string(8) "original"
string(8) "original"
Pass a static method call that returns a reference:
string(8) "original"
string(7) "changed"

Pass a method call that returns a value:

Warning: Only variables should be assigned by reference in %s on line %d
string(8) "original"
string(8) "original"
Pass a method call that returns a reference:
string(8) "original"
string(7) "changed"</result><expected>Pass a function call that returns a value:

Strict Standards: Only variables should be passed by reference in %s on line 44
string(8) "original"
string(8) "original"
Pass a function call that returns a reference:
string(8) "original"
string(7) "changed"

Pass a static method call that returns a value:

Strict Standards: Only variables should be passed by reference in %s on line 55
string(8) "original"
string(8) "original"
Pass a static method call that returns a reference:
string(8) "original"
string(7) "changed"

Pass a method call that returns a value:

Strict Standards: Only variables should be passed by reference in %s on line 67
string(8) "original"
string(8) "original"
Pass a method call that returns a reference:
string(8) "original"
string(7) "changed"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//passByReference_010.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; Pass constant assignment by reference:

Warning: Only variables should be assigned by reference in %s on line %d
string(10) "a.original"
string(10) "a.original"


---&gt; Pass variable assignment by reference:

Warning: Only variables should be assigned by reference in %s on line %d
string(10) "a.original"
string(10) "a.original"


---&gt; Pass reference assignment by reference:
string(10) "a.original"
string(9) "a.changed"


---&gt; Pass concat assignment by reference:

Warning: Only variables should be assigned by reference in %s on line %d
string(20) "b.originala.original"
string(10) "a.original"</result><expected>---&gt; Pass constant assignment by reference:

Strict Standards: Only variables should be passed by reference in %s on line 9
string(10) "a.original"
string(10) "a.original"


---&gt; Pass variable assignment by reference:

Strict Standards: Only variables should be passed by reference in %s on line 15
string(10) "a.original"
string(10) "a.original"


---&gt; Pass reference assignment by reference:
string(10) "a.original"
string(9) "a.changed"


---&gt; Pass concat assignment by reference:

Strict Standards: Only variables should be passed by reference in %s on line 28
string(20) "b.originala.original"
string(10) "a.original"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.002.phpt</fileName><outcome>output_needs_manual_review</outcome><result>Warning: Only variables should be assigned by reference in %s on line %d
string(8) "original"
string(7) "changed"</result><expected>Strict Standards: Only variables should be assigned by reference in %s on line 13
string(8) "original"
string(7) "changed"</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.003.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Strict Standards: Only variables should be assigned by reference in %s on line 17
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 7
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.004.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Strict Standards: Only variables should be assigned by reference in %s on line 19
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 8
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.005.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Trying to assign by reference the return value of a function that returns by value:

Strict Standards: Only variables should be assigned by reference in %s on line 20
int(5)
int(100)

---&gt; 2. Trying to assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 8
int(5)
int(100)

---&gt; 3. Trying to assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.006.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line 15
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 7
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.007.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line 16
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 8
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test><test><fileName>tests/zend/lang//returnByReference.008.phpt</fileName><outcome>output_needs_manual_review</outcome><result>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line %d

Notice: Only variable references should be returned by reference in %s on line %d

Warning: Only variables should be assigned by reference in %s on line %d
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</result><expected>---&gt; 1. Via a return by ref function call, assign by reference the return value of a function that returns by value:

Notice: Only variable references should be returned by reference in %s on line 16
int(5)
int(100)

---&gt; 2. Via a return by ref function call, assign by reference the return value of a function that returns a constant by ref:

Notice: Only variable references should be returned by reference in %s on line 8
int(5)
int(100)

---&gt; 3. Via a return by ref function call, assign by reference the return value of a function that returns by ref:
int(5)
int(5)</expected><k>&lt;k&gt;
            .K
        &lt;/k&gt;</k></test></manual-review><no-expected-result /><parser-issue><test><fileName>tests/zend/lang//024.phpt</fileName><outcome>parsing_issue</outcome><result>&lt;html&gt;
&lt;head&gt;

*** Testing assignments and variable aliasing: ***

This should read "blah": blah

This should read "this is nifty": this is nifty

*************************************************

*** Testing integer operators ***

Correct result - 8:  8

Correct result - 8:  8

Correct result - 2:  2

Correct result - -2:  -2

Correct result - 15:  15

Correct result - 15:  15

Correct result - 2:  2

Correct result - 3:  3

*********************************

*** Testing real operators ***

Correct result - 8:  8

Correct result - 8:  8

Correct result - 2:  2

Correct result - -2:  -2

Correct result - 15:  15

Correct result - 15:  15

Correct result - 2:  2

Correct result - 3:  3

*********************************

*** Testing if/elseif/else control ***

This  works
this_still_works
should_print



*** Seriously nested if's test ***
** spelling correction by kluzz **
Only two lines of text should follow:
this should be displayed. should be:  $i=1, $j=0.  is:  $i=1, $j=0</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//041.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//042.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//043.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//044.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//array_shortcut_001.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//array_shortcut_002.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//array_shortcut_003.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//array_shortcut_005.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug17115.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug21820.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug21961.phpt</fileName><outcome>parsing_issue</outcome><result>PARSING BUG!!!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug24436.phpt</fileName><outcome>parsing_issue</outcome><result>PARSING BUG!!!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug25652.phpt</fileName><outcome>parsing_issue</outcome><result>PARSING BUG!!!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//bug35382.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//comments2.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//engine_assignExecutionOrder_001.phpt</fileName><outcome>parsing_issue</outcome><result>Order with local assignment:
in f()
in g()
string(14) "assigned value"


Order with array assignment:
in f()
in g()
array(1) {
  ["name"]=&gt;
  string(14) "assigned value"
}


Order with object property assignment:
in f()
in g()
object(stdClass)#%d (1) {
  ["name"]=&gt;
  string(14) "assigned value"
}


Order with nested object property assignment:
in f()
in g()
object(stdClass)#%d (1) {
  ["o1"]=&gt;
  object(stdClass)#%d (1) {
    ["o2"]=&gt;
    object(stdClass)#%d (1) {
      ["name"]=&gt;
      string(14) "assigned value"
}
}
}


Order with dim_list property assignment:
in f()
PARSING BUG!!!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//foreachLoop.002.phpt</fileName><outcome>parsing_issue</outcome><result>Directly changing array values.
string(10) "original.1"
string(10) "original.2"
string(10) "original.3"
array(3) {
  [0]=&gt;
  string(9) "changed.0"
  [1]=&gt;
  string(9) "changed.1"
  [2]=&gt;
  string(9) "changed.2"
}

Modifying the foreach $value.
array(3) {
  [0]=&gt;
  string(10) "original.1"
  [1]=&gt;
  string(10) "original.2"
  [2]=&gt;
  string(10) "original.3"
}

Modifying the foreach &amp;$value.
array(3) {
  [0]=&gt;
  string(9) "changed.0"
  [1]=&gt;
  string(9) "changed.1"
  [2]=&gt;
  &amp;string(9) "changed.2"
}

Pushing elements onto an unreferenced array.
Unsupported feature: 'array_push' not defined!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//foreachLoop.009.phpt</fileName><outcome>parsing_issue</outcome><result>Remove elements from a referenced array during loop
Unsupported feature: 'array_pop' not defined!</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//foreachLoop.013.phpt</fileName><outcome>parsing_issue</outcome><result>Popping elements off end of an unreferenced array, using &amp;$value.
---( Array with 1 element(s): )---
--&gt; State of array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//foreachLoop.015.phpt</fileName><outcome>parsing_issue</outcome><result>Popping elements off end of a referenced array, using &amp;$value
---( Array with 1 element(s): )---
--&gt; State of referenced array before loop:
array(1) {
  [0]=&gt;
  string(3) "v.0"
}
--&gt; Do loop:
     iteration 0:  $k=0; $v=v.0
Unsupported feature: KPHP ERROR: 'Eval not supported</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//passByReference_012.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//short_tags.003.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test><test><fileName>tests/zend/lang//short_tags.004.phpt</fileName><outcome>parsing_issue</outcome><result>Parsing problem. Probably due to outdated parser.</result><expected>-</expected><k>-</k></test></parser-issue><regressions /><tot-passed>74</tot-passed><tot-failed>7</tot-failed><tot-not-supported>89</tot-not-supported><tot-manual-review>25</tot-manual-review><tot-no-result-file>0</tot-no-result-file><tot-parser-issue>24</tot-parser-issue><tot-regressions>0</tot-regressions></testResults>