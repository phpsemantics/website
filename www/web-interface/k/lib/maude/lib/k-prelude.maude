load builtins-interface.maude

--- Level 0

mod K-TECHNIQUE is 
  including #INT-INTERFACE .
  including #BOOL-INTERFACE .
  including #STRING-INTERFACE .

  var K : K . var Ks : KList .
  var LItem : ListItem .  var List : List .

  sorts KItem K .
  subsorts KItem < K .
  op .K : -> K .
  op _~>_ : K K -> K [prec 100  assoc id: .K metadata "latex=(renameTo _\\ensuremath{\\kra}_)"] .

  sorts KList NeKList .

  subsort K < NeKList < KList .
  op .KList : -> KList [metadata "latex=(renameTo \\ensuremath{\\dotCt{List\\{K\\}}})"] .

  op _`,`,_ : KList KList -> KList [assoc id: .KList prec 121 metadata "latex=(renameTo _\\ensuremath{,\\!\\!,}_)"] .
  --- One should not modify the precedence above.  
  --- Might cause the compilation to fail.
  op _`,`,_ : NeKList KList -> NeKList [ditto] .
  op _`,`,_ : KList NeKList -> NeKList [ditto] .


  sorts KLabel .

  op _`(_`) : KLabel KList -> KItem [prec 0 gather(& &)] .

  sort ListItem List NeList .
  subsort ListItem < NeList < List .
  subsort ListItem < List .
  op .List : -> List .
  op ListItem : K -> ListItem  [metadata "latex=(renameTo _)"] .
  op __ : List List -> List [assoc id: .List] .
  op __ : NeList List -> NeList [ditto] .
  op __ : List NeList -> NeList [ditto] .
  
  sort BagItem Bag NeBag .
  subsort BagItem < NeBag < Bag .
  subsort BagItem < Bag .
  op .Bag : -> Bag .
  op BagItem : K -> BagItem [metadata "latex=(renameTo _)"] .
  op __ : Bag Bag -> Bag [assoc comm id: .Bag] .
  op __ : NeBag Bag -> NeBag [ditto] .
  op BagMapItem : K Bag -> BagItem .

  sort SetItem Set NeSet .
  subsort SetItem < NeSet < Set .
  subsort SetItem < Set .
  op .Set : -> Set .
  op SetItem : K -> SetItem [metadata "latex=(renameTo _)"] .
  op __ : Set Set -> Set [assoc comm id: .Set] .
  op __ : NeSet Set -> NeSet [ditto] .

  eq SI:SetItem SI:SetItem = SI:SetItem .

  sort MapItem Map NeMap .
  subsort MapItem < NeMap < Map .
  subsort MapItem < Map .
  op .Map : -> Map .
  op _|->_ : K K -> MapItem [metadata "latex=(renameTo _\\ensuremath{\\mapsto}_)"] .
  op __ : Map Map -> Map [assoc comm id: .Map prec 120] .
  op __ : NeMap Map -> NeMap [ditto] .
  op update : Map K K -> Map .
  op update : Map Map -> Map .
  op remove : Map K K -> Map .
  op remove : Map Map -> Map .

  vars M M1 M2 : Map .
  vars Key V V' : K .
  eq update((M Key |-> V), Key, V') = M Key |-> V' .
  eq update(M, Key, V) = (M Key |-> V) [owise] .
  eq update(M1, (Key |-> V M2)) = update(update(M1, Key, V), M2) .
  eq update(M, .Map) = M .
  eq remove((M Key |-> V), Key, V) = M .
  eq remove(M1, (Key |-> V M2)) = remove(remove(M1, Key, V), M2) .  
  eq remove(M, .Map) = M .

  sort CellLabel .

  op <_>_</_> : CellLabel K CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel List CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Bag CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Set CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Map CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .

  sort KCellSort .
  op <k>_</k> : K -> KCellSort [format(b o++ni --nib o)].
  op k : -> CellLabel .


  op HOLE : -> K .
  op #freezer : K -> KLabel [strat(0) frozen] .

  op #_ : #String -> KLabel [metadata "wrapper=(builtin)"] .

  op #token : #String #String -> KLabel .
  op K2Sort : -> KLabel .
  eq K2Sort(#token(Sort:#String, Value:#String)(.KList)) = # Sort:#String (.KList) .

endm

--- K notation starts from here on

--- KLabel-Wrappers level

mod K-WRAPPERS-LABELS is
  including K-TECHNIQUE .
  including #STRING-INTERFACE .
  op KLabel2KLabel_ : KLabel -> KLabel [metadata "wrapper=(builtin)"] .
  op CellLabel2KLabel_ : CellLabel -> KLabel [metadata "wrapper=(builtin)"] .
  op KList2KLabel_ : KList -> KLabel [metadata "wrapper=(builtin)"] .
  op Bag2KLabel_ : Bag -> KLabel [metadata "wrapper=(builtin)"] .
  op Set2KLabel_ : Set -> KLabel [metadata "wrapper=(builtin)"] .
  op List2KLabel_ : List -> KLabel [metadata "wrapper=(builtin)"] .
  op Map2KLabel_ : Map -> KLabel [metadata "wrapper=(builtin)"] .
  op 'wrap-with : -> KLabel .
  op #_ : #Bool -> KLabel [metadata "wrapper=(builtin)"] .

endm

load builtins.maude
