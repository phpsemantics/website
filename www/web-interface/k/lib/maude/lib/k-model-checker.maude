***(

    This file is part of the Maude 2 interpreter.
	
	Modified for the K-Framework.

    Copyright 1997-2006 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

***)

---
---	Maude LTL satisfiability solver and model checker.
---	Version 2.3.
---



mod #LTL is
  protecting #BOOL .
  protecting #LTL-INTERFACE .

  --- primitive LTL operators
  op ~Ltl_ : #LtlFormula -> #LtlFormula [ctor prec 53 format (r o d)] .
  op _/\Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [comm ctor gather (E e) prec 55 format (d r o d)] .
  op _\/Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [comm ctor gather (E e) prec 59 format (d r o d)] .
  op OLtl_ : #LtlFormula -> #LtlFormula [ctor prec 53 format (r o d)] .
  op _ULtl_ : #LtlFormula #LtlFormula -> #LtlFormula [ctor prec 63 format (d r o d)] .
  op _RLtl_ : #LtlFormula #LtlFormula -> #LtlFormula [ctor prec 63 format (d r o d)] .

  --- defined LTL operators
  op _->Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [gather (e E) prec 65 format (d r o d)] .
  op _<->Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [prec 65 format (d r o d)] .
  op <>Ltl_ : #LtlFormula -> #LtlFormula [prec 53 format (r o d)] .
  op `[`]Ltl_ : #LtlFormula -> #LtlFormula [prec 53 format (r r r o d)] .
  op _WLtl_ : #LtlFormula #LtlFormula -> #LtlFormula [prec 63 format (d r o d)] .
  op _|->Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [prec 63 format (d r o d)] . --- leads-to
  op _=>Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [gather (e E) prec 65 format (d r o d)] .
  op _<=>Ltl_ : #LtlFormula #LtlFormula -> #LtlFormula [prec 65 format (d r o d)] .

  vars f g : #LtlFormula .

  eq f ->Ltl g = ~Ltl f \/Ltl g .
  eq f <->Ltl g = (f ->Ltl g) /\Ltl (g ->Ltl f) .
  eq <>Ltl f = TrueLtl ULtl f .
  eq []Ltl f = FalseLtl RLtl f .
  eq f WLtl g = (f ULtl g) \/Ltl []Ltl f .
  eq f |->Ltl g = []Ltl(f ->Ltl (<>Ltl g)) .
  eq f =>Ltl g = []Ltl (f ->Ltl g) .
  eq f <=>Ltl g = []Ltl (f <->Ltl g) .

  --- negative normal form
  eq ~Ltl TrueLtl = FalseLtl .
  eq ~Ltl FalseLtl = TrueLtl .
  eq ~Ltl ~Ltl f = f .
  eq ~Ltl (f \/Ltl g) = ~Ltl f /\Ltl ~Ltl g .
  eq ~Ltl (f /\Ltl g) = ~Ltl f \/Ltl ~Ltl g .
  eq ~Ltl OLtl f = OLtl ~Ltl f .
  eq ~Ltl(f ULtl g) = (~Ltl f) RLtl (~Ltl g) .
  eq ~Ltl(f RLtl g) = (~Ltl f) ULtl (~Ltl g) .
endm

mod #LTL-SIMPLIFIER is
  including #LTL .

  --- The simplifier is based on:
  ---   Kousha Etessami and Gerard J. Holzman,
  ---   "Optimizing Buchi Automata", p153-167, CONCUR 2000, LNCS 1877.
  --- We use the Maude sort system to do much of the work.

  sorts $TrueLtlFormula $FalseLtlFormula $PureLtlFormula $PE-LtlFormula $PU-LtlFormula .
  subsort $TrueLtlFormula $FalseLtlFormula < $PureLtlFormula <
	  $PE-LtlFormula $PU-LtlFormula < #LtlFormula .
	  
  op TrueLtl : -> $TrueLtlFormula [ctor ditto] .
  op FalseLtl : -> $FalseLtlFormula [ctor ditto] .
  op _/\Ltl_ : $PE-LtlFormula $PE-LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op _/\Ltl_ : $PU-LtlFormula $PU-LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op _/\Ltl_ : $PureLtlFormula $PureLtlFormula -> $PureLtlFormula [ctor ditto] .
  op _\/Ltl_ : $PE-LtlFormula $PE-LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op _\/Ltl_ : $PU-LtlFormula $PU-LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op _\/Ltl_ : $PureLtlFormula $PureLtlFormula -> $PureLtlFormula [ctor ditto] .
  op OLtl_ : $PE-LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op OLtl_ : $PU-LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op OLtl_ : $PureLtlFormula -> $PureLtlFormula [ctor ditto] .
  op _ULtl_ : $PE-LtlFormula $PE-LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op _ULtl_ : $PU-LtlFormula $PU-LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op _ULtl_ : $PureLtlFormula $PureLtlFormula -> $PureLtlFormula [ctor ditto] .
  op _ULtl_ : $TrueLtlFormula #LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op _ULtl_ : $TrueLtlFormula $PU-LtlFormula -> $PureLtlFormula [ctor ditto] .
  op _RLtl_ : $PE-LtlFormula $PE-LtlFormula -> $PE-LtlFormula [ctor ditto] .
  op _RLtl_ : $PU-LtlFormula $PU-LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op _RLtl_ : $PureLtlFormula $PureLtlFormula -> $PureLtlFormula [ctor ditto] .
  op _RLtl_ : $FalseLtlFormula #LtlFormula -> $PU-LtlFormula [ctor ditto] .
  op _RLtl_ : $FalseLtlFormula $PE-LtlFormula -> $PureLtlFormula [ctor ditto] .

  vars p q r s : #LtlFormula .
  var pe : $PE-LtlFormula .
  var pu : $PU-LtlFormula .
  var pr : $PureLtlFormula .

  --- Rules 1, 2 and 3; each with its dual.
  eq (p ULtl r) /\Ltl (q ULtl r) = (p /\Ltl q) ULtl r .
  eq (p RLtl r) \/Ltl (q RLtl r) = (p \/Ltl q) RLtl r .
  eq (p ULtl q) \/Ltl (p ULtl r) = p ULtl (q \/Ltl r) .
  eq (p RLtl q) /\Ltl (p RLtl r) = p RLtl (q /\Ltl r) .
  eq TrueLtl ULtl (p ULtl q) = TrueLtl ULtl q .
  eq FalseLtl RLtl (p RLtl q) = FalseLtl RLtl q .

  --- Rules 4 and 5 do most of the work.
  eq p ULtl pe = pe .
  eq p RLtl pu = pu .

  --- An extra rule in the same style.
  eq OLtl pr = pr .

  --- We also use the rules from:
  ---   Fabio Somenzi and Roderick Bloem,
  ---	"Efficient Buchi Automata from LTL LtlFormulae",
  ---   p247-263, CAV 2000, LNCS 1633.
  --- that are not subsumed by the previous system.

  --- Four pairs of duals.
  eq OLtl p /\Ltl OLtl q = OLtl (p /\Ltl q) .
  eq OLtl p \/Ltl OLtl q = OLtl (p \/Ltl q) .
  eq OLtl p ULtl OLtl q = OLtl (p ULtl q) .
  eq OLtl p RLtl OLtl q = OLtl (p RLtl q) .
  eq TrueLtl ULtl OLtl p = OLtl (TrueLtl ULtl p) .
  eq FalseLtl RLtl OLtl p = OLtl (FalseLtl RLtl p) .
  eq (FalseLtl RLtl (TrueLtl ULtl p)) \/Ltl (FalseLtl RLtl (TrueLtl ULtl q)) = FalseLtl RLtl (TrueLtl ULtl (p \/Ltl q)) .
  eq (TrueLtl ULtl (FalseLtl RLtl p)) /\Ltl (TrueLtl ULtl (FalseLtl RLtl q)) = TrueLtl ULtl (FalseLtl RLtl (p /\Ltl q)) .

  --- <= relation on formula
  op _<=_ : #LtlFormula #LtlFormula -> #Bool [prec 75] .

  eq p <= p = true .
  eq FalseLtl <= p  = true .
  eq p <= TrueLtl = true .

  ceq p <= (q /\Ltl r) = true if (p <= q) /\ (p <= r) .
  ceq p <= (q \/Ltl r) = true if p <= q .
  ceq (p /\Ltl q) <= r = true if p <= r .
  ceq (p \/Ltl q) <= r = true if (p <= r) /\ (q <= r) .

  ceq p <= (q ULtl r) = true if p <= r .
  ceq (p RLtl q) <= r = true if q <= r .
  ceq (p ULtl q) <= r = true if (p <= r) /\ (q <= r) .
  ceq p <= (q RLtl r) = true if (p <= q) /\ (p <= r) .
  ceq (p ULtl q) <= (r ULtl s) = true if (p <= r) /\ (q <= s) .
  ceq (p RLtl q) <= (r RLtl s) = true if (p <= r) /\ (q <= s) .

  --- condition rules depending on <= relation
  ceq p /\Ltl q = p if p <= q .
  ceq p \/Ltl q = q if p <= q .
  ceq p /\Ltl q = FalseLtl if p <= ~Ltl q .
  ceq p \/Ltl q = TrueLtl if ~Ltl p <= q .
  ceq p ULtl q = q if p <= q .
  ceq p RLtl q = q if q <= p .
  ceq p ULtl q = TrueLtl ULtl q if p =/=Universal TrueLtl /\ ~Ltl q <= p .
  ceq p RLtl q = FalseLtl RLtl q if p =/=Universal FalseLtl /\ q <= ~Ltl p .
  ceq p ULtl (q ULtl r) = q ULtl r if p <= q .
  ceq p RLtl (q RLtl r) = q RLtl r if q <= p .
endm

mod #SAT-SOLVER is
  protecting #LTL .

  --- formula lists and results
  sorts #LtlFormulaList #SatSolveResult #TautCheckResult .
  subsort #LtlFormula < #LtlFormulaList .
  subsort #Bool < #SatSolveResult #TautCheckResult .
  op LTLnil : -> #LtlFormulaList [ctor] .
  op _LTL;_ : #LtlFormulaList #LtlFormulaList -> #LtlFormulaList [ctor assoc id: LTLnil] .
  op LTLmodel : #LtlFormulaList #LtlFormulaList -> #SatSolveResult [ctor] .

  op LTLsatSolve : #LtlFormula ~> #SatSolveResult
	[special (
	   id-hook SatSolverSymbol
	   op-hook trueSymbol           (TrueLtl : ~> #LtlFormula)
	   op-hook falseSymbol		(FalseLtl : ~> #LtlFormula)
	   op-hook notSymbol		(~Ltl_ : #LtlFormula ~> #LtlFormula)
	   op-hook nextSymbol		(OLtl_ : #LtlFormula ~> #LtlFormula)
	   op-hook andSymbol		(_/\Ltl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook orSymbol		(_\/Ltl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook untilSymbol		(_ULtl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook releaseSymbol	(_RLtl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook formulaListSymbol
		   (_LTL;_ : #LtlFormulaList #LtlFormulaList ~> #LtlFormulaList)
	   op-hook nilFormulaListSymbol	(LTLnil : ~> #LtlFormulaList)
	   op-hook modelSymbol
		   (LTLmodel : #LtlFormulaList #LtlFormulaList ~> #SatSolveResult)
	   term-hook falseTerm		(false)
	 )] .

  op LTLcounterexample : #LtlFormulaList #LtlFormulaList -> #TautCheckResult [ctor] .
  op LTLtautCheck : #LtlFormula ~> #TautCheckResult .
  op LTL$invert : #SatSolveResult -> #TautCheckResult .

  var F : #LtlFormula .
  vars L C : #LtlFormulaList .
  eq LTLtautCheck(F) = LTL$invert(LTLsatSolve(~Ltl F)) .
  eq LTL$invert(false) = true .
  eq LTL$invert(LTLmodel(L, C)) = LTLcounterexample(L, C) .
endm

mod #MODEL-CHECKER is
  protecting #QID .
  including #MODEL-CHECKER-INTERFACE .
  including #LTL .
  including K-WRAPPERS-LABELS .

  subsort Bag < #ModelCheckerState .
  subsort K < #Prop .
  op #_ : #ModelCheckResult -> KLabel .
  op #_ : #LtlFormula -> KLabel .
  op '_|=Ltl_ : -> KLabel .
  op 'modelCheck`(_`,_`) : -> KLabel .

  eq 'modelCheck`(_`,_`)(Bag2KLabel(B:Bag)(.KList),,Formula:#LtlFormula) 
   = # modelCheck(B:Bag,Formula:#LtlFormula)(.KList) .

op '_->Ltl_ : -> KLabel[metadata "function=() gather=(e E) arity=(2)"].
op '_/\Ltl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_<->Ltl_ : -> KLabel[metadata "function=() hook=(#LTL:_<->Ltl_) arity=(2)"].
op '_<=>Ltl_ : -> KLabel[metadata "function=() hook=(#LTL:_<=>Ltl_) arity=(2)"].
op '_=>Ltl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_RLtl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_ULtl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_WLtl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_\/Ltl_ : -> KLabel[metadata "function=() arity=(2)"].
op '_|->Ltl_ : -> KLabel[metadata "function=() arity=(2)"].
op '<>Ltl_ : -> KLabel[metadata "function=() arity=(1)"].
op 'OLtl_ : -> KLabel[metadata "function=() arity=(1)"].
op '`[`]Ltl_ : -> KLabel[metadata "function=() arity=(1)"].
op '~Ltl_ : -> KLabel[metadata "function=() arity=(1)"].

  var F F1 F2 : #LtlFormula .

  eq '_->Ltl_(F1,,F2) = F1 ->Ltl F2 .
  eq '_/\Ltl_(F1,,F2) = F1 /\Ltl F2 .
  eq '_<->Ltl_(F1,,F2) = F1 <->Ltl F2 .
  eq '_<=>Ltl_(F1,,F2) = F1 <=>Ltl F2 .
  eq '_=>Ltl_(F1,,F2) = F1 =>Ltl F2 .
  eq '_RLtl_(F1,,F2) = F1 RLtl F2 .
  eq '_ULtl_(F1,,F2) = F1 ULtl F2 .
  eq '_WLtl_(F1,,F2) = F1 WLtl F2 .
  eq '_\/Ltl_(F1,,F2) = F1 \/Ltl F2 .
  eq '_->Ltl_(F1,,F2) = F1 ->Ltl F2 .
  eq '`[`]Ltl_(F) = []Ltl F .
  eq '~Ltl_(F) = ~Ltl F .
  eq 'OLtl_(F) = OLtl F .
  eq '<>Ltl_(F) = <>Ltl F .
  eq # TrueLtl(.KList) = TrueLtl .
  eq # FalseLtl(.KList) = FalseLtl .


  ceq B:Bag |=Ltl Prop:K = true 
   if '_|=Ltl_(Bag2KLabel(B:Bag)(.KList),,Prop:K) = # true(.KList) .

  subsort #Prop < #LtlFormula .

  --- transitions and results
  sorts #RuleName #Transition #TransitionList .
  subsort #Qid < #RuleName .
  subsort #Transition < #TransitionList .
  subsort #Bool < #ModelCheckResult .
  ops UnlabeledLtl deadlockLtl : -> #RuleName .
  op LTL{_,_} : #ModelCheckerState #RuleName -> #Transition [ctor] .
  op LTLnil : -> #TransitionList [ctor] .
  op _LTL_ : #TransitionList #TransitionList -> #TransitionList [ctor assoc id: LTLnil] .
  op LTLcounterexample : #TransitionList #TransitionList -> #ModelCheckResult [ctor] .

  op modelCheck : #ModelCheckerState #LtlFormula ~> #ModelCheckResult
	[special (
	   id-hook ModelCheckerSymbol
	   op-hook trueSymbol           (TrueLtl : ~> #LtlFormula)
	   op-hook falseSymbol		(FalseLtl : ~> #LtlFormula)
	   op-hook notSymbol		(~Ltl_ : #LtlFormula ~> #LtlFormula)
	   op-hook nextSymbol		(OLtl_ : #LtlFormula ~> #LtlFormula)
	   op-hook andSymbol		(_/\Ltl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook orSymbol		(_\/Ltl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook untilSymbol		(_ULtl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
	   op-hook releaseSymbol	(_RLtl_ : #LtlFormula #LtlFormula ~> #LtlFormula)
           op-hook satisfiesSymbol      (_|=Ltl_ : #ModelCheckerState #LtlFormula ~> #Bool)
	   op-hook qidSymbol		(<Qids> : ~> #Qid)
	   op-hook unlabeledSymbol	(UnlabeledLtl : ~> #RuleName)
	   op-hook deadlockSymbol	(deadlockLtl : ~> #RuleName)
	   op-hook transitionSymbol	(LTL{_,_} : #ModelCheckerState #RuleName ~> #Transition)
	   op-hook transitionListSymbol
		   (_LTL_ : #TransitionList #TransitionList ~> #TransitionList)
	   op-hook nilTransitionListSymbol	(LTLnil : ~> #TransitionList)
	   op-hook counterexampleSymbol
		   (LTLcounterexample : #TransitionList #TransitionList ~> #ModelCheckResult)
	   term-hook trueTerm		(true)
	 )] .
endm
