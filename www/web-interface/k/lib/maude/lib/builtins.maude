***(
    This file is part of the K-Maude tool

    Copyright (C) 2009-2011 Grigore Rosu
    Portions Copyright (C) 1997-2009 SRI International, Menlo Park, CA 94025, USA.

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)

mod #BOOL is  including #BOOL-INTERFACE .
  op if_then_else_fi : #Bool Universal Universal -> Universal 
    [poly (2 3 0) special (
    id-hook BranchSymbol
    term-hook 1 (true)
    term-hook 2 (false))] .
  op _==Universal_ : Universal Universal -> #Bool [poly (1 2) prec 51  metadata "latex=(renameTo _$=$\\subscript{{\\scriptstyle\\it{}Bool}}_)" special (
    id-hook EqualitySymbol
    term-hook equalTerm (true)
    term-hook notEqualTerm (false))] .
  op _=/=Universal_ : Universal Universal -> #Bool [poly (1 2) prec 51 metadata "latex=(renameTo _$\\neq$\\subscript{{\\scriptstyle\\it{}Bool}}_)" special (
    id-hook EqualitySymbol
    term-hook equalTerm (false)
    term-hook notEqualTerm (true))] .

  op _==Bool_ : #Bool #Bool -> #Bool .
  eq B1:#Bool ==Bool B2:#Bool = B1:#Bool ==Universal B2:#Bool .

  op _and-then_ : #Bool #Bool -> #Bool [strat (1 0) gather (e E) prec 55] .
  op _or-else_ : #Bool #Bool -> #Bool [strat (1 0) gather (e E) prec 59] .
  var B : [#Bool] .
  eq true and-then B = B .
  eq false and-then B = false .
  eq true or-else B = true .
  eq false or-else B = B .

  op notBool_ : #Bool -> #Bool .
  eq notBool true = false .
  eq notBool false = true .

  op _andBool_ : #Bool #Bool -> #Bool .
  eq true andBool B:#Bool = B:#Bool .
  eq B:#Bool andBool true = B:#Bool .
  eq false andBool ?:#Bool = false .
  eq ?:#Bool andBool false = false .

  op _xorBool_ : #Bool #Bool -> #Bool .
  eq false xorBool B:#Bool = B:#Bool .
  eq B:#Bool xorBool false = B:#Bool .
  eq B:#Bool xorBool B:#Bool = false .
  eq B1:#Bool xorBool B2:#Bool = notBool (B1:#Bool ==Bool B2:#Bool) .

  op _orBool_ : #Bool #Bool -> #Bool .
  eq true orBool ?:#Bool = true .
  eq ?:#Bool orBool true = true .
  eq false orBool B:#Bool = B:#Bool .
  eq B:#Bool orBool false = B:#Bool .

  op _impliesBool_ : #Bool #Bool -> #Bool .
  eq true impliesBool B:#Bool = B:#Bool .
  eq false impliesBool ?:#Bool = true .
  eq ?:#Bool impliesBool true = true .
  eq B:#Bool impliesBool false = notBool B:#Bool .
 endm


mod #NAT is
  protecting #BOOL .
  protecting #NAT-INTERFACE .
  op _+Nat_ : #NzNat #Nat -> #NzNat
        [assoc comm prec 33 metadata "latex=(renameTo _\\ensuremath{{}+}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook ACU_NumberOpSymbol (+)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op _+Nat_ : #Nat #Nat -> #Nat [ditto] .

  op sdNat : #Nat #Nat -> #Nat
        [comm
         special (id-hook CUI_NumberOpSymbol (sd)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _*Nat_ : #NzNat #NzNat -> #NzNat
        [assoc comm prec 31 metadata "latex=(renameTo _\\ensuremath{{}*}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook ACU_NumberOpSymbol (*)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op _*Nat_ : #Nat #Nat -> #Nat [ditto] .

  op _/Nat_ : #Nat #Nat -> #Nat
        [prec 31 gather (E e)
         special (id-hook NumberOpSymbol (quo)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))
         metadata "latex=(renameTo _\\ensuremath{{}\\div}\\subscript{{\\scriptstyle\\it{}Nat}}_)" ] .

  op _%Nat_ : #Nat #Nat -> #Nat
        [prec 31 gather (E e)
         special (id-hook NumberOpSymbol (rem)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))
        --- metadata "latex=(renameTo _\\ensuremath{\\%}\\subscript{{\\scriptstyle\\it{}Nat}}_)" ] .
		metadata "latex=(renameTo _\\%\\subscript{{\\scriptstyle\\it{}Nat}}_)" ] .

  op _^Nat_ : #Nat #Nat -> #Nat
        [prec 29  gather (E e)  
		metadata "latex=(renameTo _\\ensuremath{\\mathbin{\\char`\\^}}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
		--- metadata "latex=(renameTo _\\textasciicircum\\verb|^|\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (^)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op _^Nat_ : #NzNat #Nat -> #NzNat [ditto] .

  op modExpNat : #Nat #Nat #NzNat -> #Nat
        [special (id-hook NumberOpSymbol (modExp)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
 
  op gcdNat : #NzNat #Nat -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (gcd)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op gcdNat : #Nat #Nat -> #Nat [ditto] .

  op lcmNat : #NzNat #NzNat -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (lcm)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op lcmNat : #Nat #Nat -> #Nat [ditto] .

  op minNat : #NzNat #NzNat -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (min)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op minNat : #Nat #Nat -> #Nat [ditto] .

  op maxNat : #NzNat #Nat -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (max)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op maxNat : #Nat #Nat -> #Nat [ditto] .

  op _xorNat_ : #Nat #Nat -> #Nat
        [assoc comm prec 55 metadata "latex=(renameTo _xor\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook ACU_NumberOpSymbol (xor)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _&Nat_ : #Nat #Nat -> #Nat
        [assoc comm prec 53 metadata "latex=(renameTo _\\ensuremath{{}\\&}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook ACU_NumberOpSymbol (&)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _|Nat_ : #NzNat #Nat -> #NzNat
        [assoc comm prec 57  metadata "latex=(renameTo _\\ensuremath{{}|}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook ACU_NumberOpSymbol (|)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
  op _|Nat_ : #Nat #Nat -> #Nat [ditto] .

  op _>>Nat_ : #Nat #Nat -> #Nat
        [prec 35 gather (E e) metadata "latex=(renameTo _\\ensuremath{{}\\gg}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (>>)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _<<Nat_ : #Nat #Nat -> #Nat
        [prec 35 gather (E e) metadata "latex=(renameTo _\\ensuremath{{}\\ll}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (<<)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _<Nat_ : #Nat #Nat -> #Bool
        [prec 37 metadata "latex=(renameTo _\\ensuremath{{}<}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (<)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _<=Nat_ : #Nat #Nat -> #Bool
        [prec 37 metadata "latex=(renameTo _\\ensuremath{{}\\le}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (<=)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>Nat_ : #Nat #Nat -> #Bool
        [prec 37 metadata "latex=(renameTo _\\ensuremath{{}>}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (>)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>=Nat_ : #Nat #Nat -> #Bool
        [prec 37 metadata "latex=(renameTo _\\ensuremath{{}\\ge}\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (>=)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _dividesNat_ : #Nat #Nat -> #Bool
        [prec 51 metadata "latex=(renameTo _divides\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (divides)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .
endm

mod #INT is 
  protecting #INT-INTERFACE .
  protecting #NAT .

  op _+Int_ : #Int #Int -> #Int
        [assoc comm prec 33  metadata "latex=(renameTo _\\ensuremath{{}+}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook ACU_NumberOpSymbol (+)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op _+Int_ : #NzNat #Nat -> #NzNat [ditto] .
  op _+Int_ : #Nat #Nat -> #Nat [ditto] .


  op _-Int_ : #Int #Int -> #Int
        [prec 33 gather (E e)   metadata "latex=(renameTo _\\ensuremath{{}-}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (-)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _*Int_ : #NzInt #NzInt -> #NzInt
        [assoc comm prec 31     metadata "latex=(renameTo _*\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook ACU_NumberOpSymbol (*)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op _*Int_ : #Int #Int -> #Int [ditto] .
 op _*Int_ : #NzNat #NzNat -> #NzNat [ditto] .
  op _*Int_ : #Nat #Nat -> #Nat [ditto] .

  op _/Int_ : #Int #NzInt -> #Int
        [prec 31 gather (E e)   metadata "latex=(renameTo _\\ensuremath{{}\\div}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (quo)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _%Int_ : #Int #NzInt -> #Int
        [prec 31 gather (E e)  metadata "latex=(renameTo _\\%\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (rem)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _^Int_ : #Int #Nat -> #Int
        [prec 29 gather (E e) metadata "latex=(renameTo _\\ensuremath{\\mathbin{\\char`\\^}}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (^)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op _^Int_ : #NzInt #Nat -> #NzInt [ditto] .
  op _^Int_ : #Nat #Nat -> #Nat [ditto] .
  op _^Int_ : #NzNat #Nat -> #NzNat [ditto] .

  op absInt : #NzInt -> #NzNat
        [metadata "latex=(renameTo \\ensuremath{\\vert}_\\ensuremath{\\vert}\\subscript{{\\scriptstyle\\it{}Int}})"
			special (id-hook NumberOpSymbol (abs) 
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op absInt : #Int -> #Nat [ditto] .

  op gcdInt : #NzInt #Int -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (gcd)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op gcdInt : #Int #Int -> #Nat [ditto] .

  op lcmInt : #NzInt #NzInt -> #NzNat
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (lcm)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op lcmInt : #Int #Int -> #Nat [ditto] .

  op minInt : #NzInt #NzInt -> #NzInt
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (min)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op minInt : #Int #Int -> #Int [ditto] .
  op minInt : #NzNat #NzNat -> #NzNat [ditto] .
  op minInt : #Nat #Nat -> #Nat [ditto] .


  op maxInt : #NzInt #NzInt -> #NzInt
        [assoc comm
         special (id-hook ACU_NumberOpSymbol (max)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op maxInt : #Int #Int -> #Int [ditto] .
  op maxInt : #NzNat #Int -> #NzNat [ditto] .
  op maxInt : #Nat #Int -> #Nat [ditto] .

  op ~Int_ : #Int -> #Int
   [metadata "latex=(renameTo {\\raise.17ex\\hbox{$\\scriptstyle\\sim$}}\\subscript{{\\scriptstyle\\it{}Int}}_)"
        special (id-hook NumberOpSymbol (~)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _xorInt_ : #Int #Int -> #Int
        [assoc comm prec 55 metadata "latex=(renameTo _xor\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook ACU_NumberOpSymbol (xor)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _&Int_ : #Nat #Int -> #Nat
        [assoc comm prec 53 metadata "latex=(renameTo _\\ensuremath{{}\\&}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook ACU_NumberOpSymbol (&)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op _&Int_ : #Int #Int -> #Int [ditto] .

  op _|Int_ : #NzInt #Int -> #NzInt
        [assoc comm prec 57  metadata "latex=(renameTo _\\ensuremath{{}|}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook ACU_NumberOpSymbol (|)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .
  op _|Int_ : #Int #Int -> #Int [ditto] .

  op _>>Int_ : #Int #Nat -> #Int
        [prec 35 gather (E e) metadata "latex=(renameTo _\\ensuremath{{}\\gg}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (>>)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _<<Int_ : #Int #Nat -> #Int
        [prec 35 gather (E e) metadata "latex=(renameTo _\\ensuremath{{}\\ll}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (<<)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int))] .

  op _<Int_ : #Int #Int -> #Bool
        [prec 37  metadata "latex=(renameTo _\\ensuremath{<}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (<)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _<=Int_ : #Int #Int -> #Bool
        [prec 37   metadata "latex=(renameTo _\\ensuremath{\\leq}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (<=)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>Int_ : #Int #Int -> #Bool
        [prec 37   metadata "latex=(renameTo _\\ensuremath{>}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (>)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>=Int_ : #Int #Int -> #Bool
        [prec 37  metadata "latex=(renameTo _\\ensuremath{\\geq}\\subscript{{\\scriptstyle\\it{}Int}}_)"
         special (id-hook NumberOpSymbol (>=)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _dividesInt_ : #Int #Int -> #Bool
        [prec 51 metadata "latex=(renameTo _divides\\subscript{{\\scriptstyle\\it{}Nat}}_)"
         special (id-hook NumberOpSymbol (divides)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

---(
  op _==Int_ : #Int #Int -> #Bool [prec 37 metadata "latex=(renameTo _==\\subscript{{\\scriptstyle\\it{}Int}}_)"] .
  op _!=Int_ : #Int #Int -> #Bool [prec 37 metadata "latex=(renameTo _!=\\subscript{{\\scriptstyle\\it{}Int}}_)"] .
  ceq I1 ==Int I2 = true if I1 >=Int I2 andBool I2 >=Int I1 .
  ceq I1 ==Int I2 = false if I1 >Int I2 orBool I2 >Int I1 .
  eq I1 !=Int I2 = notBool(I1 ==Int I2) .

  vars I1 I2 : #Int .
---)

  op _==Int_ : #Int #Int -> #Bool .
  eq I1:#Int ==Int I2:#Int = I1:#Int ==Universal I2:#Int .
endm

mod #RAT is
  protecting #RAT-INTERFACE .
  protecting #INT .
  var I J : #NzInt .
  var N M : #NzNat .
  var K : #Int .
  var Z : #Nat .
  var Q : #NzRat .
  var R  R1 R2 : #Rat .

  eq 0 /Rat Q = 0 .
  eq I /Rat --Int N = --Int I /Rat N .
  eq (I /Rat N) /Rat (J /Rat M) = (I *Int M) /Rat (J *Int N) .
  eq (I /Rat N) /Rat J = I /Rat (J *Int N) .
  eq I /Rat (J /Rat M) = (I *Int M) /Rat J .

  op -Rat_ : #NzRat -> #NzRat .
  op -Rat_ : #Rat -> #Rat  .
  eq -Rat R = --Int R .
  eq --Int (I /Rat N) = --Int I /Rat N .

  op _+Rat_ : #PosRat #PosRat -> #PosRat [assoc comm prec 33 metadata "latex=(renameTo _\\ensuremath{{}+}\\subscript{{\\scriptstyle\\it{}Rat}}_)"] .
  op _+Rat_ : #PosRat #Nat -> #PosRat [ditto] .
  op _+Rat_ : #Rat #Rat -> #Rat [ditto] .
  op _+Rat_ : #NzNat #Nat -> #NzNat [ditto] .
  op _+Rat_ : #Nat #Nat -> #Nat [ditto] .
  eq R1 +Rat R2 = R1 +Int R2 .
  op _+Int_ : #PosRat #PosRat -> #PosRat [ditto] .
  op _+Int_ : #PosRat #Nat -> #PosRat [ditto] .
  op _+Int_ : #Rat #Rat -> #Rat [ditto] .
  eq I /Rat N +Int J /Rat M = (I *Int M +Int J *Int N) /Rat (N *Int M) .
  eq I /Rat N +Int K = (I +Int K *Int N) /Rat N .

  op _-Rat_ : #Rat #Rat -> #Rat [prec 33 gather (E e)] .
  eq R1 -Rat R2 = R1 -Int R2 .
  op _-Int_ : #Rat #Rat -> #Rat [ditto] .
  eq I /Rat N -Int J /Rat M = (I *Int M -Int J *Int N) /Rat (N *Int M) .
  eq I /Rat N -Int K = (I -Int K *Int N) /Rat N .
  eq K -Int J /Rat M = (K *Int M -Int J ) /Rat M .

  op _*Rat_ : #PosRat #PosRat -> #PosRat [assoc comm prec 31] .
  op _*Rat_ : #NzRat #NzRat -> #NzRat [ditto] .
  op _*Rat_ : #Rat #Rat -> #Rat [ditto] .
  eq R1 *Rat R2 = R1 *Int R2 .
  op _*Int_ : #PosRat #PosRat -> #PosRat [ditto] .
  op _*Int_ : #NzRat #NzRat -> #NzRat [ditto] .
  op _*Int_ : #Rat #Rat -> #Rat [ditto] .
  eq Q *Int 0 = 0 .
  eq (I /Rat N) *Int (J /Rat M) = (I *Int J) /Rat (N *Int M).
  eq (I /Rat N) *Int K = (I *Int K) /Rat N .

  op _/Int_ : #PosRat #PosRat -> #Nat [ditto] .
  op _/Int_ : #Rat #NzRat -> #Int [ditto] .
  eq (I /Rat N) /Int Q = I /Int (N *Int Q) .
  eq K /Int (J /Rat M) = (K *Int M) /Int J .

  op _%Int_ : #Rat #NzRat -> #Rat [ditto] .
  eq (I /Rat N) %Int (J /Rat M) = ((I *Int M) %Int (J *Int N)) /Rat (N *Int M) .
  eq K %Int (J /Rat M) = ((K *Int M) %Int J) /Rat M .
  eq (I /Rat N) %Int J = (I %Int (J *Int N)) /Rat N .

  op _^Rat_ : #PosRat #Nat -> #PosRat [prec 29 gather (E e)] .
  op _^Rat_ : #NzRat #Nat -> #NzRat [ditto] .
  op _^Rat_ : #Rat #Nat -> #Rat [ditto] .
  eq R1 ^Rat N = R1 ^Int N .
  op _^Int_ : #PosRat #Nat -> #PosRat [ditto] .
  op _^Int_ : #NzRat #Nat -> #NzRat [ditto] .
  op _^Int_ : #Rat #Nat -> #Rat [ditto] .
  eq (I /Rat N) ^Int Z = (I ^Int Z) /Rat (N ^Int Z) .

  op absRat : #NzRat -> #PosRat  .
  op absRat : #Rat -> #Rat  .
  eq absRat(R) = absInt(R) .
  op absInt : #NzRat -> #PosRat [ditto] .
  op absInt : #Rat -> #Rat [ditto] .
  eq absInt(I /Rat N) = absInt(I) /Rat N .

  op gcdRat : #NzRat #Rat -> #PosRat [assoc comm] .
  op gcdRat : #Rat #Rat -> #Rat [ditto] .
  eq gcdRat(R1,R2) = gcdInt(R1,R2) .
  op gcdInt : #NzRat #Rat -> #PosRat [ditto] .
  op gcdInt : #Rat #Rat -> #Rat [ditto] .
  eq gcdInt(I /Rat N, R) = gcdInt(I, N *Int R) /Rat N .

  op lcmRat : #NzRat #NzRat -> #NzRat [assoc comm] .
  op lcmRat : #Rat #Rat -> #Rat [assoc comm] .
  eq lcmRat(R1, R2) = lcmInt(R1, R2) .
  op lcmInt : #NzRat #NzRat -> #PosRat [ditto] .
  op lcmInt : #Rat #Rat -> #Rat [ditto] .
  eq lcmInt(I /Rat N, R) = lcmInt(I, N *Int R) /Rat N .

  op minRat : #PosRat #Rat -> #PosRat [assoc comm] .
  op minRat : #NzRat #NzRat -> #NzRat [ditto] .
  op minRat : #Rat #Rat -> #Rat [assoc comm] .
  eq minRat(R1, R2) = minInt(R1, R2) .
  op minInt : #PosRat #PosRat -> #PosRat [ditto] .
  op minInt : #NzRat #NzRat -> #NzRat [ditto] .
  op minInt : #Rat #Rat -> #Rat [ditto] .
  eq minInt(I /Rat N, R) = minInt(I, N *Int R) /Rat N .

  op maxRat : #PosRat #Rat -> #PosRat [assoc comm] .
  op maxRat : #NzRat #NzRat -> #NzRat [ditto] .
  op maxRat : #Rat #Rat -> #Rat [assoc comm] .
  eq maxRat(R1, R2) = maxInt(R1, R2) .
  op maxInt : #PosRat #Rat -> #PosRat [ditto] .
  op maxInt : #NzRat #NzRat -> #NzRat [ditto] .
  op maxInt : #Rat #Rat -> #Rat [ditto] .
  eq maxInt(I /Rat N, R) = maxInt(I, N *Int R) /Rat N .

  op _<Rat_ : #Rat #Rat -> #Bool [prec 37] .
  eq R1 <Rat R2 = R1 <Int R2 .
  op _<Int_ : #Rat #Rat -> #Bool [ditto] .
  eq (I /Rat N) <Int (J /Rat M) = (I *Int M) <Int (J *Int N) .
  eq (I /Rat N) <Int K = I <Int (K *Int N) .
  eq K <Int (J /Rat M) = (K *Int M) <Int J .

  op _<=Rat_ : #Rat #Rat -> #Bool [prec 37] .
  eq R1 <=Rat R2 = R1 <=Int R2 .
  op _<=Int_ : #Rat #Rat -> #Bool [ditto] .
  eq (I /Rat N) <=Int (J /Rat M) = (I *Int M) <=Int (J *Int N) .
  eq (I /Rat N) <=Int K = I <=Int (K *Int N) .
  eq K <=Int (J /Rat M) = (K *Int M) <=Int J .

  op _>Rat_ : #Rat #Rat -> #Bool [prec 37] .
  eq R1 >Rat R2 = R1 >Int R2 .
  op _>Int_ : #Rat #Rat -> #Bool [ditto] .
  eq (I /Rat N) >Int (J /Rat M) = (I *Int M) >Int (J *Int N) .
  eq (I /Rat N) >Int K = I >Int (K *Int N) .
  eq K >Int (J /Rat M) = (K *Int M) >Int J .

  op _>=Rat_ : #Rat #Rat -> #Bool [prec 37] .
  eq R1 >=Rat R2 = R1 >=Int R2 .
  op _>=Int_ : #Rat #Rat -> #Bool [ditto] .
  eq (I /Rat N) >=Int (J /Rat M) = (I *Int M) >=Int (J *Int N) .
  eq (I /Rat N) >=Int K = I >=Int (K *Int N) .
  eq K >=Int (J /Rat M) = (K *Int M) >=Int J .

  op _dividesRat_ : #NzRat #Rat -> #Bool [prec 51] .
  eq Q dividesRat R = Q dividesInt R .
  op _dividesInt_ : #NzRat #Rat -> #Bool [ditto] .
  eq (I /Rat N) dividesInt K = I dividesInt N *Int K .
  eq Q dividesInt (J /Rat M) = Q *Int M dividesInt J .

  op truncRat : #PosRat -> #Nat .
  op truncRat : #Rat -> #Int .
  eq truncRat(K) = K .
  eq truncRat(I /Rat N) = I /Int N .
  
  op fracRat : #Rat -> #Rat .
  eq fracRat(K) = 0 .
  eq fracRat(I /Rat N) = (I %Int N) /Rat N .

  op floorRat : #PosRat -> #Nat .
  op floorRat : #Rat -> #Int .
  op ceilingRat : #PosRat -> #NzNat .
  op ceilingRat : #Rat -> #Int .
  eq floorRat(K) = K .
  eq ceilingRat(K) = K .
  eq floorRat(N /Rat M) = N /Int M .
  eq ceilingRat(N /Rat M) = ((N +Int M) -Int 1) /Int M .
  eq floorRat(--Int N /Rat M) = --Int ceilingRat(N /Rat M) .
  eq ceilingRat(--Int N /Rat M) = --Int floorRat(N /Rat M) .
endm

mod #FLOAT is
  protecting #BOOL .
  protecting #FLOAT-INTERFACE .
  op -Float_ : #Float -> #Float
        [prec 15 metadata "latex=(renameTo \\ensuremath{-{}}\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (-)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op -Float_ : #FiniteFloat -> #FiniteFloat [ditto] .

  op _+Float_ : #Float #Float -> #Float
        [prec 33 gather (E e) metadata "latex=(renameTo _+\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (+)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _-Float_ : #Float #Float -> #Float
        [prec 33 gather (E e) metadata "latex=(renameTo _-\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (-)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _*Float_ : #Float #Float -> #Float
        [prec 31 gather (E e) metadata "latex=(renameTo _*\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (*)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _/Float_ : #Float #Float -> #Float
        [prec 31 gather (E e) metadata "latex=(renameTo _/\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (/)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _%Float_ : #Float #Float -> #Float
        [prec 31 gather (E e) metadata "latex=(renameTo _\\%\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (rem)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _^Float_ : #Float #Float -> #Float
        [prec 29  gather (E e) metadata "latex=(renameTo _\^\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (^)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op absFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (abs)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op absFloat : #FiniteFloat -> #FiniteFloat [ditto] .

  op floorFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (floor)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op ceilingFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (ceiling)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op minFloat : #Float #Float -> #Float
        [special (id-hook FloatOpSymbol (min)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op maxFloat : #Float #Float -> #Float
        [special (id-hook FloatOpSymbol (max)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op sqrtFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (sqrt)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op expFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (exp)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op logFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (log)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op sinFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (sin)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op cosFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (cos)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op tanFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (tan)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op asinFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (asin)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op acosFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (acos)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op atanFloat : #Float -> #Float
        [special (id-hook FloatOpSymbol (atan)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op atanFloat : #Float #Float -> #Float
        [special (id-hook FloatOpSymbol (atan)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op _<Float_ : #Float #Float -> #Bool
        [prec 51 metadata "latex=(renameTo _\ensuremath<\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (<)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                   term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _<=Float_ : #Float #Float -> #Bool
        [prec 51 metadata "latex=(renameTo _\\ensuremath\\leq\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (<=)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                    term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>Float_ : #Float #Float -> #Bool
        [prec 51 metadata "latex=(renameTo _\\ensuremath>\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (>)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                    term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>=Float_ : #Float #Float -> #Bool
        [prec 51 metadata "latex=(renameTo _\\ensuremath\\geq\\subscript{{\\scriptstyle\\it{}Float}}_)"
         special (id-hook FloatOpSymbol (>=)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                    term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op piFloat : -> #FiniteFloat .
  eq piFloat = 3.1415926535897931 .

  op _=[_]Float_ : #Float #FiniteFloat #Float -> #Bool [prec 51 format (d d d d d d d d)] .
  var X Y : #Float .
  var Z : #FiniteFloat .
  eq X =[Z]Float Y = absFloat(X -Float Y) <Float Z .

  op _==Float_ : #Float #Float -> #Bool .
  eq F1:#Float ==Float F2:#Float = F1:#Float ==Universal F2:#Float .

endm

mod #STRING is
  protecting #STRING-INTERFACE .
  protecting #INT .
---  op notFound : -> FindResult [ctor] .

  --- should be #Char -> #Nat, but too restrictive type system
  op ordChar : #String -> #Nat
        [special (id-hook StringOpSymbol (ascii)
                  op-hook stringSymbol (<Strings> : ~> #Char)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op chrChar : #Int -> #Char
        [special (id-hook StringOpSymbol (char)
                  op-hook stringSymbol (<Strings> : ~> #Char)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op _+String_ : #String #String -> #String
        [prec 33 gather (E e) metadata "latex=(renameTo _+\\subscript{{\\scriptstyle\\it{}String}}_)"
         special (id-hook StringOpSymbol (+)
                  op-hook stringSymbol (<Strings> : ~> #String))] .

  op lengthString : #String -> #Nat
        [special (id-hook StringOpSymbol (length)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op substr : #String #Nat #Nat -> #String
        [special (id-hook StringOpSymbol (substr)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .

  op substrString : #String #Nat #Nat -> #String .
  ceq substrString(S1:#String, I1:#Nat, I2:#Nat) = substr(S1:#String, I1:#Nat, I2:#Nat -Int I1:#Nat) if I2:#Nat >=Nat I1:#Nat .
  ceq substrString(S1:#String, I1:#Nat, I2:#Nat) = "" if I2:#Nat <Nat I1:#Nat .

  op findString : #String #String #Int -> #Int
        [special (id-hook StringOpSymbol (find)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook notFoundTerm (-1))] .

  op rfindString : #String #String #Int -> #Int
        [special (id-hook StringOpSymbol (rfind)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  term-hook notFoundTerm (-1))] .

  op _<String_ : #String #String -> #Bool 
        [prec 37
         special (id-hook StringOpSymbol (<)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _<=String_ : #String #String -> #Bool 
        [prec 37
         special (id-hook StringOpSymbol (<=)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>String_ : #String #String -> #Bool 
        [prec 37
         special (id-hook StringOpSymbol (>)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _>=String_ : #String #String -> #Bool 
        [prec 37
         special (id-hook StringOpSymbol (>=)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  term-hook trueTerm (true)
                  term-hook falseTerm (false))] .

  op _==String_ : #String #String -> #Bool .
  eq S1:#String ==String S2:#String = S1:#String ==Universal S2:#String .
endm

mod #ID is 
  including #ID-INTERFACE .
  including #STRING .
endm

mod #CONVERSION is
  protecting #CONVERSION-INTERFACE .
  protecting #ID .
  protecting #RAT .
  protecting #FLOAT .
  protecting #STRING .
  op Bool2Int : #Bool -> #Int .
  eq Bool2Int(true) = 1 . 
  eq Bool2Int(false) = 0 .

  op Rat2Float : #Rat -> #Float
        [special (id-hook FloatOpSymbol (float)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  op-hook divisionSymbol (_/Rat_ : #NzInt #NzNat ~> #NzRat))] .
  
  op int2Float : #Int -> #Float [metadata "latex=(renameTo {\\it{}int2Float})"] .
  eq int2Float(I:#Int) = Rat2Float(I:#Int) .

  op Float2Rat : #Float -> #Rat
        [special (id-hook FloatOpSymbol (rat)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  op-hook divisionSymbol (_/Rat_ : #NzInt #NzNat ~> #NzRat))] .

  op float2Int : #Float -> #Int .
  --- eq float2Int(F:#Float) = truncRat(Float2Rat(floorFloat(F:#Float))) .
  --- supposed to round toward 0, not away from it
  eq float2Int(F:#Float) = truncRat(Float2Rat(F:#Float)) .
  

  op Rat2String : #Rat #NzNat -> #String
        [special (id-hook StringOpSymbol (string)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  op-hook divisionSymbol (_/Rat_ : #NzInt #NzNat ~> #NzRat))] .

  op int2string : #Int -> #String .
  eq int2string(I:#Int) = Rat2String(I:#Int,10) .
  
  op base2String : #Int #NzNat -> #String .
  eq base2String(I:#Int, N:#NzNat) = Rat2String(I:#Int, N:#NzNat) .

  op String2Rat : #String #NzNat -> #Rat
        [special (id-hook StringOpSymbol (rat)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  op-hook divisionSymbol (_/Rat_ : #NzInt #NzNat ~> #NzRat))] .
				  
  op string2Base : #String #NzNat -> #Int .
ceq string2Base(S:#String, N:#NzNat) = I:#Int if I:#Int := String2Rat(S:#String, N:#NzNat) .				  

  op string2int : #String ~> #Int .
ceq string2int(S:#String) = I:#Int if I:#Int := String2Rat(S:#String,10) .
 

  op float2String : #Float -> #String
        [special (id-hook StringOpSymbol (string)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op string2Float : #String ~> #Float
        [special (id-hook StringOpSymbol (float)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook floatSymbol (<Floats> : ~> #Float))] .

  op decFloat : #Float #Nat -> #DecFloat
        [special (id-hook StringOpSymbol (decFloat)
                  op-hook stringSymbol (<Strings> : ~> #String)
                  op-hook floatSymbol (<Floats> : ~> #Float)
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat)
                  op-hook minusSymbol (--Int_ : #NzNat ~> #Int)
                  op-hook decFloatSymbol 
                          (#DecFloat : #Int #String #Int ~> #DecFloat))] .

  op id2String : #Id -> #String .
  eq id2String(#id(Str:#String)) = Str:#String .

  op string2Id : #String -> #Id .
  eq string2Id(Str:#String) = #id(Str:#String) .
endm

mod #QID is
  protecting #STRING .
  sort #Qid .

--- pseudo constructor for the infinite set of quoted identifiers
  op <Qids> : -> #Qid [special (id-hook QuotedIdentifierSymbol)] .

  op string : #Qid -> #String 
        [special (id-hook QuotedIdentifierOpSymbol (string)
                  op-hook quotedIdentifierSymbol (<Qids> : ~> #Qid)
                  op-hook stringSymbol (<Strings> : ~> #String))] .

  op qid : #String -> #Qid 
        [special (id-hook QuotedIdentifierOpSymbol (qid)
                  op-hook quotedIdentifierSymbol (<Qids> : ~> #Qid)
                  op-hook stringSymbol (<Strings> : ~> #String))] .
endm


mod #RANDOM is
  protecting #RANDOM-INTERFACE .
  protecting #NAT .
  op randomRandom : #Nat -> #Nat
        [special (id-hook RandomOpSymbol
                  op-hook succSymbol (sNat_ : #Nat ~> #NzNat))] .
endm

mod #COUNTER is
  protecting #COUNTER-INTERFACE .
  protecting #QID .
  protecting #CONVERSION .

  op f : #Qid -> #Qid [special (id-hook QuotedIdentifierOpSymbol (mos)
                              op-hook quotedIdentifierSymbol (<Qids> : ~> #Qid))] .

  var I : #Int . var N : #Nat .
  op distinctCounter : #Int -> #Int .
  eq distinctCounter(I) = string2int(string(f('a))) .
  op counter : -> #Int .
  eq counter = distinctCounter(0) .
  op setCounter : #Int -> #Int .
  op setCounter : #Int #Int -> #Int .
  eq setCounter(sNat(N)) = setCounter(N, distinctCounter(N)) .
  eq setCounter(sNat(N), I) = setCounter(N, distinctCounter(N)) .
  eq setCounter(0, I) = I .  
endm

mod #K-EQUAL is
  including #BOOL .
  including K-TECHNIQUE .
  op _==K_ : K K -> #Bool .
  eq K1:K ==K K2:K = K1:K ==Universal K2:K .
endm

load pl-meta-level

mod #K-PARSER is
  including K-TECHNIQUE .
  including #STRING .
  including #INT .
  including #QID .
  including #META-LEVEL .

  op string2k : #String -> K .
  op string2bag : #String -> Bag .
  op string2term : #String -> #Term .

  op metaTokenize : #String #String -> #QidList .

  op breaksToken : #Char -> #Bool .
  op isWhitespace : #Char -> #Bool .

  op mainModule : -> #Qid .

  eq string2term(S:#String) = getTermRP(metaParse(upModule(mainModule, false), metaTokenize("", S:#String), anyTypeMeta)) .
  eq string2k(S:#String) = downTerm(string2term(S:#String), .K) .
  eq string2bag(S:#String) = downTerm(string2term(S:#String), .Bag) .

  ceq metaTokenize(Prefix:#String, S:#String) = if Prefix:#String ==String "" then nilQidList else qid(Prefix:#String) fi plQidList qid(substrString(S:#String, 0, 1)) plQidList metaTokenize("", substrString(S:#String, 1, lengthString(S:#String))) if breaksToken(substrString(S:#String, 0, 1)) and-then substrString(Prefix:#String, 0, 1) =/=Universal "\"" .
  ceq metaTokenize(Prefix:#String, S:#String) = if Prefix:#String ==String "" then nilQidList else qid(Prefix:#String) fi plQidList metaTokenize("", substrString(S:#String, 1, lengthString(S:#String))) if isWhitespace(substrString(S:#String, 0, 1)) and-then substrString(Prefix:#String, 0, 1) =/=Universal "\"" .
  ceq metaTokenize(Prefix:#String, S:#String) = metaTokenize(Prefix:#String +String substrString(S:#String, 0, 2), substrString(S:#String, 2, lengthString(S:#String))) if substrString(S:#String, 0, 1) ==String "\\" and-then substrString(Prefix:#String, 0, 1) ==String "\"" .
  ceq metaTokenize(Prefix:#String, S:#String) = qid(Prefix:#String +String "\"") plQidList metaTokenize("", substrString(S:#String, 1, lengthString(S:#String))) if substrString(S:#String, 0, 1) ==String "\"" and-then substrString(Prefix:#String, 0, 1) ==String "\"" .
  ceq metaTokenize(Prefix:#String, S:#String) = metaTokenize(Prefix:#String +String substrString(S:#String, 0, 2), substrString(S:#String, 2, lengthString(S:#String))) if substrString(S:#String, 0, 1) ==String "`" .
  eq metaTokenize(Prefix:#String, "") = if Prefix:#String ==String "" then nilQidList else qid(Prefix:#String) fi [label metaTokenize-finish] .
  eq metaTokenize(Prefix:#String, S:#String) = metaTokenize(Prefix:#String +String substrString(S:#String, 0, 1), substrString(S:#String, 1, lengthString(S:#String))) [owise] .


  eq breaksToken("{") = true .
  eq breaksToken("}") = true .
  eq breaksToken("[") = true .
  eq breaksToken("]") = true .
  eq breaksToken("(") = true .
  eq breaksToken(")") = true .
  eq breaksToken(",") = true .
  eq breaksToken(C:#Char) = false [owise] .

  eq isWhitespace(" ") = true .
  eq isWhitespace("\n") = true .
  eq isWhitespace("\t") = true .
  eq isWhitespace(C:#Char) = false [owise] .
endm

mod #K-PRINTER is
  including #K-PARSER .

  op k2string : K -> #String .
  op bag2string : Bag -> #String .
  op term2string : #Term -> #String .

  eq k2string(K:K) = term2string(upTerm(K:K)) .
  eq bag2string(B:Bag) = term2string(upTerm(B:Bag)) .

  eq term2string(T:#Term) = metaDetokenize(metaPrettyPrint(upModule(mainModule, false), T:#Term, nonePOS)) .

  op metaDetokenize : #QidList -> #String .
  op convertToken : #String -> #String .

  eq metaDetokenize(Q:#Qid plQidList L:#QidList) = convertToken(string(Q:#Qid)) +String " " +String metaDetokenize(L:#QidList) .
  eq metaDetokenize(nilQidList) = "" .

  eq convertToken("`{") = "{" .
  eq convertToken("`}") = "}" .
  eq convertToken("`[") = "[" .
  eq convertToken("`]") = "]" .
  eq convertToken("`(") = "(" .
  eq convertToken("`)") = ")" .
  eq convertToken("`,") = "," .
  eq convertToken(S:#String) = S:#String [owise] .

endm

load k-model-checker
load socket.maude
load TCPSupport
load smt.maude


mod BUILTINS is
including #BOOL .
including #NAT .
including #INT .
including #RAT .
including #FLOAT .
including #STRING .
including #CONVERSION .
---including #QID .
including #RANDOM .
including #COUNTER .
including #BOOL .
including #ID .
including #LTL .
including #MODEL-CHECKER .
endm


