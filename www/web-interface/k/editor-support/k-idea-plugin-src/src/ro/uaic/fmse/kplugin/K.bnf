{
  parserClass="ro.uaic.fmse.kplugin.parser.KParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="K"
  psiImplClassSuffix="Impl"
  psiPackage="ro.uaic.fmse.kplugin.psi"
  psiImplPackage="ro.uaic.fmse.kplugin.psi.impl"

  elementTypeHolderClass="ro.uaic.fmse.kplugin.psi.KTypes"
  elementTypeClass="ro.uaic.fmse.kplugin.psi.KElementType"
  tokenTypeClass="ro.uaic.fmse.kplugin.psi.KTokenType"
}

//Important: always delete the old parser before generating the new one.

kFile ::= require* module*

require ::= "require" string_literal &new_require {pin=1 recoverWhile=not_new_require}
private new_require ::= "require" | "module"
private not_new_require ::= !new_require

module ::= "module" item_name imports* module_item* "endmodule" &new_module {pin=1 recoverWhile=not_new_module}
private new_module ::= "module" | <<eof>>
private not_new_module ::= !new_module

imports ::= "imports" item_name &new_imports {pin=1 recoverWhile=not_new_imports}
private new_imports ::= "imports" | new_item
private not_new_imports ::= !new_imports

//choices are in decreasing priority order
private module_item ::= configuration | syntax | syntax_priorities | rule | context | other_item | other_item_body
                          {recoverWhile=not_new_item}
private new_item ::= "configuration" | "syntax" | "rule" | "context" | "endmodule" //| other_item_body
private not_new_item ::= !new_item

configuration ::= "configuration" cell+ &new_item {implements="ro.uaic.fmse.kplugin.psi.IModuleItem"} //{pin=1}

syntax ::= "syntax" sort "::=" production_attr? syntax_rhs (production_sep production_attr? syntax_rhs)* &new_item
             {mixin="ro.uaic.fmse.kplugin.psi.impl.KSyntaxBase"
              implements="ro.uaic.fmse.kplugin.psi.IKSyntaxBase"} //{pin=1}
production_sep ::= "|" | ">"
production_attr ::= ("left" ":") | ("non-assoc" ":")

private syntax_rhs ::= syntax_rhs_regular | syntax_rhs_aux_function | syntax_rhs_list | syntax_rhs_token
syntax_rhs_regular ::= (attribute_block_list | sort | STRING)+ &(production_sep | new_item_strict)
                            {mixin = "ro.uaic.fmse.kplugin.psi.impl.PsiKSyntaxRhsRegularBase"}
syntax_rhs_aux_function ::= id? "(" sort? ("," sort)* ")" attribute_block_list?
                            {mixin = "ro.uaic.fmse.kplugin.psi.impl.PsiKSyntaxRhsAuxFunctionBase"}
syntax_rhs_list ::= "List" "{" sort "," STRING "}" attribute_block_list?
syntax_rhs_token ::= "Token" "{" token_elem* "}" attribute_block_list?
private token_elem ::= INTEGER_LITERAL|STRING|OPERATOR|OTHER|id|",,"|","|"_"|label

syntax_priorities ::= "syntax" "priorities" expr+ &new_item {implements="ro.uaic.fmse.kplugin.psi.IModuleItem"}

//it is forbidden to have an expression after an attribute
private attribute_block_list ::= attribute_block+ &(production_sep | new_item)
attribute_block ::= "[" attribute ("," attribute)* "]"
attribute ::= item_name "(" balanced_expr* ")" | item_name
private balanced_expr ::= expr_no_brackets | "(" balanced_expr* ")"

rule ::= "rule" rule_name? rule_body &new_item {implements="ro.uaic.fmse.kplugin.psi.IModuleItem"} //{pin=1}
rule_name ::= "[" item_name "]" ":"
rule_body  ::= (attribute_block_list|expr| "when")+ &new_item
               | rule_body_with_open_tags
rule_body_with_open_tags ::= (attribute_block_list|expr| "when" | cell_start)+ &new_item

context ::= "context" rule_body &new_item {implements="ro.uaic.fmse.kplugin.psi.IModuleItem"} //{pin=1}

//an possible unusual module item, not matched by standard productions
other_item ::= ("configuration" | "syntax" | "rule" | "context") [other_item_body] &new_item
                {implements="ro.uaic.fmse.kplugin.psi.IModuleItem" pin=1}
other_item_body ::= (attribute_block_list | expr | "when")+ &new_item_strict
new_item_strict ::= "configuration" | "syntax" | "rule" | "context" | "endmodule"

item_name ::= id ("-" id)*
id ::= BUILTIN_ID | BUILTIN_FUNC | USER_ID | reusable_keyword
private reusable_keyword ::= "require" | "imports"

private expr     ::= expr_no_brackets|parenthesis|VERTICAL_BAR|tag_border_in_exp
private expr_no_brackets  ::= cell|typed_var|id_expr|INTEGER_LITERAL|STRING|OPERATOR|OTHER
                             |BRACE|",,"|","|"_"|label
id_expr ::= id {mixin="ro.uaic.fmse.kplugin.psi.impl.KIdExprBase"
                   implements="ro.uaic.fmse.kplugin.psi.IKIdExprBase"}

typed_var ::= var_dec colon sort
var_dec ::= id | "_" {mixin="ro.uaic.fmse.kplugin.psi.impl.KVarDecBase"
                      implements="ro.uaic.fmse.kplugin.psi.IKVarDecBase"}
colon ::= ":"
sort ::= id {mixin="ro.uaic.fmse.kplugin.psi.impl.KSortBase"
             implements="ro.uaic.fmse.kplugin.psi.IKSortBase"}

cell ::= cell_start expr+ cell_end | "<" id "/>"
cell_start ::= "<" cell_start_cont
private cell_start_cont ::= id (id "=" STRING)* ">"
cell_end ::= "</" cell_end_cont
private cell_end_cont ::= id ">"

private tag_border_in_exp ::= (("<" !cell_start_cont) | ("</" !cell_end_cont) | ">" | "/>")

label ::= LABEL_TOK {mixin="ro.uaic.fmse.kplugin.psi.impl.KLabelBase"
                     implements="ro.uaic.fmse.kplugin.psi.IKLabelBase"}
string_literal ::= STRING

l_comment ::= COMMENT

private parenthesis ::= LEFT_PAREN | RIGHT_PAREN
//productions mentioned here are only relevant for code generator, not used in the grammar
private l_other ::= KEYWORD | TAG_BORDER | VERTICAL_BAR | DOUBLE_COMMA | COMMA | UNDERSCORE
