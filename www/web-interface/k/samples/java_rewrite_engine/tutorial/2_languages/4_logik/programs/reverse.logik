append(nil,L,L).
append(cons(H,T),L,cons(H,Z)) :- append(T,L,Z).

reverseSlow(nil,nil).
reverseSlow(cons(H,T),L) :-
  reverseSlow(T,T1),
  append(T1,cons(H,nil),L).

reverseFast(nil,L,L).
reverseFast(cons(H,T),L1,L2) :-
  reverseFast(T,cons(H,L1),L2).

reverse(L1,L2) :-
  reverseFast(L1,nil,L2).

// Next should have only one solution; --search suffices
?- reverseSlow(cons(a,cons(b,cons(c,nil))), L).

// Next has only one solution, but LOGIK is not able to infer that there is
// only one.  So use --search --bound 2 when you krun it.
//?- reverseSlow(L, cons(a,cons(b,cons(c,nil)))).

// Next should generate all palindromes.  However, since there are infinitely
// many of them, use a bound, say 5, to only see a few.
//?- reverseSlow(L,L).

// Next finds all conditions characterising palindromes of size 3: A=C
//?- reverseSlow(cons(A,cons(B,cons(C,nil))),cons(A,cons(B,cons(C,nil)))).

//?- reverseSlow(cons(a,cons(X,cons(c,nil))),L), reverseSlow(L, T).


// Now all the above but using the fast reverse
//?- reverse(cons(a,cons(b,cons(c,nil))), L).
//?- reverse(L, cons(a,cons(b,cons(c,nil)))).
//?- reverse(L,L).
//?- reverse(cons(A,cons(B,cons(C,nil))),cons(A,cons(B,cons(C,nil)))).
//?- reverse(cons(a,cons(X,cons(c,nil))),L), reverse(L, T).
