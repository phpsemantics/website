/*
Partitioning an Array

This problem was originally formulated and solved by Hoare [1962] 
as part of his Quicksort algorithm.

Given an array a of integers and variables m, f, n s.t m <= f <= n
write a program which computes three variables pi, le, ri standing 
for pivot, left, and right such that:

1. pi is the initial values of a[f]
2. le > ri and a is partitioned into three subsections:
   a. those with values of at most pi
   b. those equal to pi
   c. those with values of at least pi
3. the sizes of the subsections are strictly smaller than the size 
of the array.

The IMP program below is the implementation of the program shown 
in the book "Verification of Sequential and Concurrent Programs"
(Springer, 2010) at page 101, written by Foley and Hoare [1971].
*/

int m, n, pi, le, ri, f, temp, a[50];

pre: 0 <= m and m <= f and f <= n
post: ri + 1 <= n and m + 1 <= le

m = 1;
n = 10;
a[0] = 2;
a[1] = 3;
a[2] = 7;
a[3] = 1;
a[4] = 4;
a[5] = 5;
a[6] = 4;
a[7] = 8;
a[8] = 9;
a[9] = 7;
f = 7;

pi = a[f];
le = m;
ri = n;

while (le <= ri) {
  while (a[le] + 1 <= pi) {
    le = le + 1;
  }
  while (pi + 1 <= a[ri]) {
    ri = ri - 1;
  }
  if (le <= ri) {
    temp = a[le];
    a[le] = a[ri];
    a[ri] = temp;
    le = le + 1;
    ri = ri - 1;
  }
  else { }
}